name,modelo
1,"Modulo
association Controle
association Recurso <Abstract>
----
- recursos: ArrayList<Recurso>
- id: int
- nome: String
- complexidade: int
- obrigatorio: boolean
----
+ Modulo()
+ adicionaRecurso(idRecurso: int): int
+ getComplexidade(): int
+ move(idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(obrigatorio: boolean): void
+ toString(): String
----
Teste
extends Recurso <Abstract>
----
- perguntas: String[]
----
+ Teste()
+ getPerguntas(): String[]
----
Texto
extends Recurso <Abstract>
----
- texto: String
----
+ Texto()
+ getTexto(): String
----
Video
extends Recurso <Abstract>
----
- url: String
- duracao: int
----
+ Video()
+ getUrl(): String
+ getDuracao(): int
----
Recurso <Abstract>
----
# id: int
----
# getId(): int
# complexidade(): double
# toString(): String
# equals(obj: Object): boolean
# hashcode(): int
----
Usuario
----
- email: String
- url: String
- nome: String
- matricula: String
- modulo: Modulo
- acesso: ArrayList<int>
----
+ Usuario()
+ registraAcesso(idModulo: int, idRecurso: int): void
+ ehAcessivel(idModulo: int, idRecurso: int): boolean
+ listaAcessos(): String
+ toString(): String
----
Controle
association Usuario
association Recurso <Abstract>
----
- recursos: HashMap<int, Recurso>
- modulos: HashMap<int, Modulo>
- usuarios: HashSet<String>
----
+ Controle()
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ cadastraModulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
----
Facade
association Controle
----
- controle: Controle
----
+ Facade()
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ cadastraModulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
----
Main
association Facade
----
----
----"
2,"Facade
composes EEEI
---
---
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ calculaComplexidadeVideo(duracao: int): int
+ calculaComplexidadeTexto(texto: String): int
+ calculaComplexidadeTeste(perguntas: String[]): int
+ toString(): String
+ toStringComplexidadeVideo(): String
+ toStringComplexidadeTexto(): String
+ toStringComplexidadeTeste(): String

+ cadastraModulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String

+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
---

EEEI
composes ControllerModulos
composes ControllerUsuario
---
- controllerModulos: ControllerModulos
- controllerUsuario: ControllerUsuario
---
+ EEEI()
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ calculaComplexidadeVideo(duracao: int): int
+ calculaComplexidadeTexto(texto: String): int
+ calculaComplexidadeTeste(perguntas: String[]): int
+ toString(): String
+ toStringComplexidadeVideo(): String
+ toStringComplexidadeTexto(): String
+ toStringComplexidadeTeste(): String

+ cadastraModulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String

+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
---

ControllerModulos
composes Modulo
---
- modulos: HashMap<String, Modulo>
---
+ ControllerModulos()
+ cadastraModulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

Modulo
association Recurso <interface>
implements Recurso <interface>
---
- recursos: ArrayList<int>
- acessosUsuarios: HashMap<String,ArrayList<int>>
- complexidade: double
- nome: String
- idModulo: int
---
+ Modulo(complexidade: double, nome: String)
+ cadastraModulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String

+ equals(o: object): boolean
+ hashCode(): int
+ toString(): String

---

Recurso <interface>
composes Video
composes Texto
composes Teste
---
---
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
---

ControllerUsuario
composes Usuario
---
- repositorioUsuarios: HashMap<String, Usuario>
---
+ ControllerUsuario()
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
---

Usuario
---
- email: String
- url: String
- nome: String
- matricula: String
---
+ Usuario(email: String, url: String, nome: String, matricula: String)
+ toString(): String
---

RecursoAbstract <Abstract>
implements Recurso <interface>
---
- id: int
---
+ equals(o: object): boolean
+ hashCode(): int
---

Video
extends RecursoAbstract <Abstract>
---
- url: String
- duracao: int
---
+ Video(url: String, duracao: int)
+ cadastraVideo(url: String, duracao: int): int
+ calculaComplexidadeVideo(duracao: int): int
+ toString(): String
+ toStringComplexidade(): String
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
---

Texto
extends RecursoAbstract <Abstract>
---
- texto: String
---
+ Texto(texto: String)
+ cadastraTexto(texto: String): int
+ calculaComplexidadeTexto(texto: String): int
+ toString(): String
+ toStringComplexidade(): String
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
---

Teste
extends RecursoAbstract <Abstract>
---
- perguntas: String[]
---
+ cadastraPergunta(perguntas: String[]): int
+ calculaComplexidadeTeste(perguntas: String[]): int
+ toString(): String
+ toStringComplexidade(): String
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
---"
3,"Facade
association FacadeController
----
----
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String

+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
----
FacadeController
association ModuloController
association RecursosEducacionaisController
association UsuariosController
----
----
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraTeste(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibeRecursoEducacional(id: int): String
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String

+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
----
ModuloController
association Modulo
----
- modulos: HashMap<int, Modulo>
----
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(idModulo: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
----
RecursosEducacionaisController
association RecursoEducacional
----
- RecursosEducaionais: HashMap<int, RecursoEducacional>
----
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraTeste(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibeRecursoEducacional(id: int): String
----
UsuariosController
association Usuario
----
- usuarios: HashMap<String, Usuario>
----
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
----
Modulo
----
- id: int
- nome: String
- complexidade: int
- recursosEducacionais: ArrayList<int>
- obrigatoriedadeDeSeguirOrdem: boolean
- registrosDeAcesso: ArrayList<String>
----
+ Modulo(nome: String)
+ adicionaRecurso(idRecurso: int): int
- verificaRecursoEducacional(idRecurso: int): boolean
+ getComplexidade(): int
+ toString(): String
+ move(idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(obrigatorio: boolean): void
+ registraAcesso(idRecurso: int, email: String): void
+ ehAcessivel(idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
+ getID(): int
+ getNome(): String
----
RecursoEducacional
extends Video
extends Teste
extends Texto
----
- id: int
- complexidade: int
----
+ getComplexidade(): int
----
Video
----
- url: String
- duracao: int
----
+ getUrl(): String
+ getDuracao(): int
+ toStirng(): Stirng
----
Teste
----
- perguntas: String[]
----
+ getPerguntas(): String[]
+ toStirng(): Stirng
----
Texto
----
- texto: String
----
+ getTexto(): String
+ toStirng(): Stirng
----
Usuario
----
- email: String
- nome: String
- matricula: String
- url: String
----
+ getNome(): String
+ getUrl(): String
+ getmatricula(): String
+ getEmail(): String
+ toString(): String
----"
4,"ControllerGeral
composes ControllerUsuario, ControllerRecursos, ControllerModulo
---
- controllerUsuario: ControllerUsuario
- controllerRecursos: ControllerRecursos
- controllerModulo: ControllerModulo
---
+ ControllerGeral()
+ geraInteiroAleatorio(): int
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibeRecurso(id: int): String
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ temAcesso(emailUsuario: String,idRecurso: int): boolean
+ registrarAcesso(emailUsuario: String,idRecurso: int): void
+ exibirRecursosAcessados(emailUsuario: String): String
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, emailUsuario: String): boolean
+ listaAcessos(email: String): String
---

ControllerModulo
composes Modulo
---
- modulos: ArrayList<Modulo>
---
+ ControllerModulo()
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ ehAcessivel(idModulo: int, idRecurso: int, idRecursoUsuario: int): boolean
---

Modulo
---
- recursos: ArrayList<RecursoEducacional>
- nome: String
- obrigatoriedade: boolean
---
+ Modulo(nome: String)
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(obrigatorio: boolean): void
+ ehAcessivel(idRecurso: int, idRecursoUsuario: int): boolean
---

ControllerUsuario
composes Usuario
---
- usuarios: HashMap<String,Usuario>
---
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ temAcesso(emailUsuario: String,idRecurso: int): boolean
+ registrarAcesso(emailUsuario: String,idRecurso: int): void
+ exibirRecursosAcessados(emailUsuario: String): String
---

Usuario
---
- email: String
- urlFoto: String
- nome: String
- matricula: int
- recursosAcessados: ArrayList<Integer>
---
+ toString(): String
+ temAcesso(idRecurso: int): boolean
+ registrarAcesso(idRecurso: int): void
+ exibirRecursosAcessados(): String
---

ControllerRecursos
composes RecursoEducacional <Abstract>
---
- recursos: ArrayList<RecursoEducacional>
---
+ ControllerRecursos()
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
---

RecursoEducacional <Abstract>
---
- complexidade: int
---
+ RecursoEducacional()
+ toString(): String
+ getComplexidade(): int
+ atualizaComplexidade(): void
---

Video
extends RecursoEducacional <Abstract>
---
- url: String
- duracao: int
---
+ Video(url: String, duracao:int)
+ atualizaComplexidade(): void
+ toString(): String
---

Texto
extends RecursoEducacional <Abstract>
---
- texto: String
---
+ Texto(texto: String)
+ atualizaComplexidade(): void
+ toString(): String
---

Teste
extends RecursoEducacional <Abstract>
---
- perguntas: String[]
---
+ Teste()
+ atualizaComplexidade(): void
+ toString(): String
---"
5,"Main
aggregates Facade
---
---
---

Facade
aggregates ControllerCentral
---
- cc: ControllerCentral
---
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

ControllerCentral
aggregates ControllerUsuario, ControllerRecurso, ControllerModulo
---
- cu: ControllerUsuario
- cr: ControllerRecurso
- cm: ControllerModulo
---
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

ControllerUsuario
aggregates Usuario
---
- usuarios: Map<String, Usuario>
---
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
---

ControllerRecurso
aggregates Recurso<Interface>
---
- recursos: Map<int, Recurso>
---
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
---

ControllerModulo
aggregates Modulo
---
- modulos: Map<int, Modulo>
- acessos: Map<string, Map<int, Map<int, boolean>>> // Logica, o primeiro map armazena o email do usuário e um map para cada modulo, o segundo liga o modulo e um map com seus recursos, e o terceiro armazena se o usuário já viu determinado recurso
---
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

Usuario
---
- email: String
- url: String
- nome: String
- matricula: String
---
+ Usuario(email: String, url: String, nome: String, matricula: String)
+ equals(obj: Object): boolean
+ hashCode(): int
+ toString(): string
---

Recurso<Interface>
---
---
+ getComplexidade(): int // Cada implementação terá ser getComplexidade, mesmo sem ter o atributo complexidade, já que ele pode ser calculado por uma formula fixa
+ toString(): string
---

Video
implements Recurso<Interface>
---
- id: int
- url: String
- duracao: int
---
+ Video(id: int, url: String, duracao: int)
+ getComplexidade(): int
+ equals(obj: Object): boolean
+ hashCode(): int
+ toString(): string
---

Texto
implements Recurso<Interface>
---
- id: int
- texto: String
---
+ Texto(id: int, texto: String)
+ getComplexidade(): int
+ equals(obj: Object): boolean
+ hashCode(): int
+ toString(): string
---

Pergunta
implements Recurso<Interface>
---
- id: int
- perguntas: String[]
---
+ Pergunta(id: int, perguntas: String[])
+ getComplexidade(): int
+ equals(obj: Object): boolean
+ hashCode(): int
+ toString(): string
---

Modulo
---
- id: int
- nome: string
- recursos: List<Recurso> //aqui vcs deram uma pegada em, querer que não tenha duplicatas e que mantenha ordem
- ids: Set<int> // ids dos recursos cadastrados para garantir que não vai repetir de uma maneira otimizada, em vez de usar contains na List
- complexidade: int // recalculada sempre que adicionar um novo recurso
- obrigatoriedade: boolean
--- // pensei em colocar adicionaRecurso e moveRecurso aqui, mas o controller pode simplesmente dar um getRecursos e organizar tudo por lá
+ Modulo(id: int, nome: string)
+ setObrigatoriedade(obrigatoriedade: boolean): void
+ equals(obj: Object): boolean
+ hashCode(): int
+ toString(): string
---"
6,"// Projeto - Ensino Eletrônico e Eficiente de Idiomas (EEEI!)
//Sistema próprio para a aprendizagem de idiomas
//
//Por: Matheus Gomes Coelho - 119210937

Main
association Facade
---
---
---

RecursosUsuariosControlador
composes Recurso <abstract>,Usuario
---
- recursos: HashMap<int,Recurso>
- usuarios: HashMap<str,Usuario>
---
+ RecursosUsuariosControlador()
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
---

ModulosAcessoControlador
association RecursosUsuariosControlador
composes Modulo
---
- modulos: HashMap<int,Modulo>
---
+ ModulosAcessoControlador()
+ cadastraModulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

Facade
association RecursosUsuariosControlador, ModulosAcessoControlador
---
- controladorRecursosEUsuarios: RecursosUsuariosControlador
- controladorModulosEAcesso: ModulosAcessoControlador
---
+ Facade()
//RECURSOS
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
//USUARIOS
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
//MODULOS
+ cadastraModulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
//ACESSO
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

Video
extends Recurso <abstract>
---
- url: str
- duracao: int
---
+ Video(url: str, duracao: int)
+ getComplexidade(): int
+ equals(o: Object): boolean
+ hashCode(): int
+ toString(): str
---

Texto
extends Recurso <abstract>
---
- texto: str
---
+ Texto(texto: str)
+ getComplexidade(): int
+ equals(o: Object): boolean
+ hashCode(): int
+ toString(): str
---

Teste
extends Recurso <abstract>
---
- perguntas: str[]
---
+ Teste(perguntas: str[])
+ getComplexidade(): int
+ equals(o: Object): boolean
+ hashCode(): int
+ toString(): str
---

Usuario
association Recurso <abstract>
---
- email: str
- url: str
- nome: str
- matricula: str
- recursos: HashMap<int,Recurso>
---
+ Usuario(email:str, url:str, nome:str, matricula:str)
+ equals(o: Object): boolean
+ hashCode(): int
+ toString(): str
---

Modulo
association Usuario
---
- nome: str
- recursos: TreeMap <int,Recurso>
- complexidade: int
- obrigatoriedade: boolean
- acessos: HashMap<str,Usuario>
---
+ Modulo(nome:str)
+ getComplexidade(): int
+ adicionaRecurso(idRecurso: int): void
+ move(idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(obrigatorio: boolean): void
+ registraAcesso(idRecurso: int, email: String): void
+ ehAcessivel(idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
+ equals(o: Object): boolean
+ hashCode(): int
+ toString(): str
---

Recurso <abstract>
implements Comparator<Recurso <abstract>>
---
- complexidade: int
---
+ getComplexidade(): int
+ compare(o1:Object, o2:Object): int
---"
7,"// diagrama de classes de exemplo
// duas barras definem comentários

Main
---
---
---

Facade
composes Main
---
- sysctl : SystemController
---
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

SystemController
composes Facade
---
- recursos: HashSet<Recurso>
- modulos: HashSet<Modulo>
- usuarios : HashSet<Usuario>
---
+ SystemController()
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

Modulo
composes SystemController
---
- recursos: HashSet<Recurso>
- complexidade : int
- obrigatorio: boolean
- id : int
---
+ Modulo(nome: String)
+ addRecurso(rec : Recurso) : int
+ move(rec: Recurso, novaPosicao: int): void
+ setObrigatorio(val : boolean) : void
+ getRecursos(): HashSet<Recurso>
+ getId() : int
+ getComplexidade() : int
+ complexidade() : int
+ toString() : String
+ hashCode() : int
---

Usuario
composes SystemController
---
- historicoAcesso: int[][]
- email: String
- url: String
- nome: String
- matricula: String
---
+ Usuario(email: String, url: String, nome: String, matricula: String)
+ registraAcesso(idModulo: int, idRecurso: int): void
+ setEmail():void
+ setUrl():void
+ setNome():void
+ setMatricula():void
+ gethistoricoAcesso() : int[][]
+ getEmail():String
+ getNome():String
+ getUrl():String
+ getMatricula():String
+ toString() : String
---

Recurso<Abstract>
composes SystemController
---
---
+ complexidade() : int
---

Video
extends Recurso<Abstract>
---
- url : String
- duracao : int
- complexidade : int
- id : int
---
+ Video(url: String, duracao: int)
+ setUrl() : void
+ setDuracao() : void
+ getUrl() : String
+ getDuracao() : int
+ getId() : int
+ getComplexidade() : int
+ complexidade() : int
+ toString() : String
+ hashCode() : int
---

Texto
extends Recurso<Abstract>
---
- texto : String
- complexidade : int
- id : int
---
+ Texto(texto: String)
+ setTexto() : String
+ getId() : int
+ complexidade() : int
+ getComplexidade() : int
+ toString() : String
+ hashCode() : int
---

Teste
extends Recurso<Abstract>
---
- perguntas : String[]
- complexidade : int
- id : int
---
+ Teste(perguntas: String[])
+ complexidade() : int
+ getComplexidade() : int
+ getId() : int
+ toString() : String
+ hashCode() : int
---

 "
8,"main
association Facade
---
---
---

Facade
composes EEEI
---
---
+ Facade()
+ cadastraVideo(url : String, duracao : int) : int
+ cadastraTexto(texto : String) : int
+ cadastraPergunta(perguntas : String[]) : int
+ pegaComplexidade(id : int) : int
+ exibe(id : int) : String
+ cadastraUsuario(email : String, url : String, nome : String, matricula : String) : void
+ exibeUsuario(email : String) : String
+ cadastraMódulo(nome : String) : int
+ adicionaRecurso(idModulo : int, idRecurso : int) : int
+ pegaComplexidadeModulo(id : int) : int
+ exibeModulo(id : int) : String
+ move(idModulo : int, idRecurso : int, novaPosicao : int) : void
+ defineObrigatoriedade(idModulo : int, obrigatorio : boolean) : void
+ registraAcesso(idModulo : int, idRecurso : int, email : String) : void
+ ehAcessivel(idModulo : int, idRecurso : int, email : String) : boolean
+ listaAcessos(email : String) : String
---

EEEI
composes RecursosController
composes ModuloController
---
- controllerRecursos : RecursosController
- controllerModulo : ModuloController
---
+ EEEI()
+ cadastraVideo(url : String, duracao : int) : int
+ cadastraTexto(texto : String) : int
+ cadastraPergunta(perguntas : String[]) : int
+ pegaComplexidade(id : int) : int
+ exibe(id : int) : String
+ cadastraUsuario(email : String, url : String, nome : String, matricula : String) : void
+ exibeUsuario(email : String) : String
+ cadastraMódulo(nome : String) : int
+ adicionaRecurso(idModulo : int, idRecurso : int) : int
+ pegaComplexidadeModulo(id : int) : int
+ exibeModulo(id : int) : String
+ move(idModulo : int, idRecurso : int, novaPosicao : int) : void
+ defineObrigatoriedade(idModulo : int, obrigatorio : boolean) : void
+ registraAcesso(idModulo : int, idRecurso : int, email : String) : void
+ ehAcessivel(idModulo : int, idRecurso : int, email : String) : boolean
+ listaAcessos(email : String) : String
---

RecursosController
composes Usuario
composes RecursoEducacional <Interface>
---
- usuariosRepositorio : HashMap<String,Usuario>
- recursosEducacionaisRepositorio : HashMap<int,RecursoEducacional>
---
+ RecursosController()
+ cadastraVideo(url : String, duracao : int) : int
+ cadastraTexto(texto : String) : int
+ cadastraPergunta(perguntas : String[]) : int
+ pegaComplexidade(id : int) : int
+ exibe(id : int) : String
+ cadastraUsuario(email : String, url : String, nome : String, matricula : String) : void
+ exibeUsuario(email : String) : String
+ getRecurso() : RecursoEducacional
---

Usuario
---
- email : String
- url : String
- nome : String
- matricula : String
---
+ Usuario(email : String, url : String, nome : String, matricula : String)
+ toString() : String
+ hashCode() : int
+ equals(obj : Object) : boolean
---

RecursoEducacional <Interface>
---
---
+ getComplexidade() : int
---

Video
implements RecursoEducacional <Interface>
---
- url : String
- duracao : int
---
+ Video(url : String, duracao : int)
+ getComplexidade() : int
+ toString() : String
+ hashCode() : int
+ equals(obj : Object) : boolean
---

Testes
implements RecursoEducacional <Interface>
---
- perguntas : String[]
---
+ Testes(perguntas : String[])
+ getComplexidade() : int
+ toString() : String
+ hashCode() : int
+ equals(obj : Object) : boolean
---

Texto
implements RecursoEducacional <Interface>
---
- texto : String
---
+ Texto(texto : String)
+ getComplexidade() : int
+ toString() : String
+ hashCode() : int
+ equals(obj : Object) : boolean
---

ModuloController
composes Modulo
---
- moduloRepositorio : HashMap<String,Modulo>
- acessos : HashMap<String,ArrayList<String>>
---
+ ModuloController()
+ cadastraMódulo(nome : String) : int
+ adicionaRecurso(idModulo : int, recurso : Object) : int
+ pegaComplexidadeModulo(id : int) : int
+ exibeModulo(id : int) : String
+ move(idModulo : int, idRecurso : int, novaPosicao : int) : void
+ defineObrigatoriedade(idModulo : int, obrigatorio : boolean) : void
+ registraAcesso(idModulo : int, idRecurso : int, email : String) : void
+ ehAcessivel(idModulo : int, idRecurso : int, email : String) : boolean
+ listaAcessos(email : String) : String
---

Modulo
composes RecursoEducacional <Interface>
---
- nome : String
- recursos : ArrayList<RecursoEducacional>
---
+ Modulo()
+ toString() : String
+ hashCode() : int
+ equals(obj : Object) : boolean
+ getComplexidade() : int
---"
9,"Facade
association Controller
---
- controler: Controller
---
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

 

Controller
association RecursoInterface
association Usuario
association Modulo
---
- usuarios: HashMap<String,Usuario>
- recursos: HashMap<Integer, RecursoInterface>
- modulos: HashMap<Integer, Modulo>
---
+ Controller()
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
- geraIdRecurso(): int
- geraIdModulo(): int
---

Usuario
---
- email: String
- urlFoto: String
- nome: String
- matricula: String
- acessos: HashSet<int[]>
---
+ Usuario(email: String, url: String, nome: String, matricula: String)
+ toString(): String
+ listaAcessos(): String
+ registraAcesso(idModulo: int, idRecurso: int): void
+ ehAcessivel(idModulo: int, idRecurso: int): boolean
---

RecursoInterface
---
---
+ pegaComplexidade(): int
+ exibe(): String
---

Video
implements RecursoInterface
---
- url: String
- duracao: int
---
+ Video(url: String, duracao: int)
+ pegaComplexidade(): int
+ exibe(): String
---

Texto
implements RecursoInterface
---
- texto: String
---
+ Texto(texto: String)
+ pegaComplexidade(): int
+ exibe(): String
---

Teste
implements RecursoInterface
---
- perguntas: String[]
---
+ Teste(perguntas: String[])
+ pegaComplexidade(): int
+ exibe(): String
---

Modulo
association RecursoInterface
---
- nome: String
- recursos: ArrayList<RecursoInterface>
- ordemObrigatoria: boolean
---
+ Modulo(nome: String)
+ adicionaRecurso(recurso: RecursoInterface): void
+ pegaComplexidadeModulo(): int
+ exibeModulo(): String
+ move(recurso: RecursoInterface, novaPosicao: int): void
+ defineObrigatoriedade(obrigatorio: boolean): void
+ getRequisitosParaAcesso(recurso: RecursoInterface): int[]
---"
10,"Main
association Facade <interface>
---
---
---

Facade <interface>
association ControllerGeral
---
---
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ cadastraModulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ cadastraVideo(idModulo: int, url: String, duracao: int): int
+ cadastraTexto(idModulo: int, texto: String): int
+ cadastraPergunta(idModulo: int, perguntas: String[]): int
+ pegaComplexidadeModulo(id: int): int
+ exibeRecurso(idModulo: int, id: int): String
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

ControllerGeral
association SistemaEEEI
association ModuloController
---
- sistemaeeei: SistemaEEEI
- controllerModulo: ModuloController
---
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ cadastraVideo(idModulo: int, url: String, duracao: int): int
+ cadastraTexto(idModulo: int, texto: String): int
+ cadastraPergunta(idModulo: int, perguntas: String[]): int
+ cadastraModulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeRecurso(idModulo: int, id: int): String
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

SistemaEEEI
association Usuario
---
- usuarios: HashMap<String, Usuario>
---
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
---

Usuario
---
- email: String
- urlFoto: String
- nome: String
- matricula: String
---
+ Usuario(email: String, url: String, nome: String, matricula: String)
+ toString(): String
+ hashCode(): int
+ equals(o: Object): boolean
---

Recurso <abstract>
---
# complexidade: int
---
# defComplexidade(): void
# getComplexidade(): int
# toString(): String
# hashCode(): int
# equals(o: Object): boolean
---

Video
association Modulo
extends Recurso <abstract>
---
- url: String
- segundosDuracao: int
- complexidade: int
---
+ Video(url: String, duracao: int)
+ defComplexidade(): void
+ getComplexidade(): int
+ toString(): String
+ hashCode(): int
+ equals(o: Object): boolean
---

Texto
association Modulo
extends Recurso <abstract>
---
- texto: String
- complexidade: int
---
+ Texto(texto: String)
+ defComplexidade(): void
+ getComplexidade(): int
+ toString(): String
+ hashCode(): int
+ equals(o: Object): boolean
---

Teste
association Modulo
extends Recurso <abstract>
---
- perguntas: String[]
- complexidade: int
---
+ Teste(perguntas: String[])
+ defComplexidade(): void
+ getComplexidade(): int
+ toString(): String
+ hashCode(): int
+ equals(o: Object): boolean
---

Modulo
association ModuloController
---
- complexidade: int
- recursos: ArrayList<Object>
- contador: int
---
+ Modulo(nome: String)
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ setComplexidade(): void
+ pegaComplexidadeModulo(): int
+ move(idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(obrigatorio: boolean): void
+ toString(): String
+ hashCode(): int
+ equals(o: Object): boolean
---

ModuloController
---
- modulos: HashMap<Integer, Modulo>
---
+ cadastraModulo(nome: String): int
+ cadastraVideo(idModulo: int, url: String, duracao: int): int
+ cadastraTexto(idModulo: int, texto: String): int
+ cadastraPergunta(idModulo: int, perguntas: String[]): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeRecurso(idModulo: int, id: int): String
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---"
11,"Facade
association RecursoController
association UsuarioController
---
---
+ Facade()

+ cadastraVideo(url: String, duracao: int): int

+ cadastraTexto(texto: String): int

+ cadastraPergunta(perguntas: String[]): int

+ pegaComplexidade(id: int): int

+ exibe(id: int): String

+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void

+ exibeUsuario(email: String): String

+ cadastraMódulo(nome: String): int

+ adicionaRecurso(idModulo: int, idRecurso: int): int

+ pegaComplexidadeModulo(id: int): int

+ exibeModulo(id: int): String

+ move(idModulo: int, idRecurso: int, novaPosicao: int): void

+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void

+ registraAcesso(idModulo: int, idRecurso: int, email: String): void

+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean

+ listaAcessos(email: String): String
---

RecursoController
composes Recurso <<Abstract>>
association Modulo
---
- mapaRecursos: HashMap<int, RecursoEducacional <<Abstract>> >
- codigosDosRecursos: HashSet<int>
- mapaModulos : HashMap<int, Modulo>
---
+ cadastraVideo(url: String, duracao: int): int

+ cadastraTexto(texto: String): int

+ cadastraPergunta(perguntas: String[]): int

+ pegaComplexidade(id: int): int

+ exibe(id: int): String

+ cadastraMódulo(nome: String): int

+ adicionaRecurso(idModulo: int, idRecurso: int): int

+ pegaComplexidadeModulo(id: int): int

+ exibeModulo(id: int): String

+ move(idModulo: int, idRecurso: int, novaPosicao: int): void

+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
---

Recurso <<Abstract>>
---
# id: int

# complexidade : int
---
+ pegaComplexidadeModulo(id: int): int

+ exibe(id: int): String
---

RecursoDeVideo
extends Recurso <<Abstract>>
---
- url: String

- duracao: int
---
+ RecursoDeVideo(id : int , url : String, duracao : int)
+ toString() : String
+ hashCode() : int
+ equals(o : object) : boolean
---

RecursoDeTexto
extends Recurso <<Abstract>>
---
- texto: String
---
+ RecursoDeTexto( id: int, texto: String)

+ toString(): String

+ hashCode(): int

+ equals(o : object): boolean
---

RecursoDeTeste
extends Recurso <<Abstract>>
---
- perguntas: String[]
---
+ RecursoDeTeste(id: int, perguntas: String[])

+ toString(): String

+ hashCode(): int

+ equals(o : object): boolean
---

Modulo
association Recurso <<Abstract>>
---
- id : int

- nome : String

- complexidade : int

- isObrigatorio : boolean

- recursos : List<Recurso>
---
+ Modulo(nome: String, idModulo: int)

+ adicionaRecurso(recurso: Recurso): int

+ mudaObrigacao(obrigacao : boolean) : void

+ move(idRecurso: int, novaPosicao: int): void

+ toString(): String

+ hashCode(): int

+ equals(o : object): boolean
---

Usuario
association Recurso <<Abstract>>
---
- nome : String

- matricula : String

- email : String

- url : String
---
+ Usuario(email: String, url: String, nome: String, matricula: String)

+ registraAcesso(recurso: Recurso): void

+ listaAcessos(): String

+ toString(): String

+ hashCode(): int

+ equals(): boolean

+ acessivel(recurso: Recurso): boolean
---

UsuarioController
composes Usuario
association RecursoController
---
- recursoControler: RecursoController
- mapaUsuarios: HashMap<String, Usuario>
---
+ ControllerUsuario(controllerRecursos: ControllerRecursos)

+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void

+ exibeUsuario(email: String): String

+ registraAcesso(idModulo: int, idRecurso: int, email: String): void

+ acessivel(idModulo: int, idRecurso: int, email: String): boolean

+ listaAcessos(email: String): String
---"
12,"ControllerModulo
---
- modulos: HashMap<String, Modulo>
---
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

ControllerUsuario
---
- usuarios: HashMap<String, Usuario>
---
+ ControllerUsuario()
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ getUsuario(id: String): String
---

ControllerRecurso
---
- recursos: HashMap<int, IRecurso>
---
+ ControllerRecurso()
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ getRecurso(id: int): IRecurso
---

Video
implements IRecurso
---
- url: String
- duracao: int
---
+ Video(url: String, duracao: int)
+ complexidado(): int
+ calculaComplexidade(): int
+ toString(): String
---

Texto
implements IRecurso
---
- texto: String
---
+ Texto(texto: String)
+ complexidado(): int
+ calculaComplexidade(): int
+ toString(): String
---

Teste
implements IRecurso
---
- pergunta: String[]
---
+ Teste(pergunta: String[])
+ complexidado(): int
+ calculaComplexidade(): int
+ toString(): String
---

Usuario
---
- email: String
- url: String
- nome: String
- matricula: String
- recursosAcessados: ArrayList<IRecurso>
---
+ Usuario(email: String, url: String, nome: String, matricula: String)
+ registraAcesso(idRecurso: int, email: String): void
+ ehAcessivel(idRecurso: int, email: String): boolean
+ listaAcessos(recurso: IRecurso): String
+ toString(): String
---

IRecurso
---
---
+ calculaComplexidade(): int
---

Modulo
---
- recursos: ArrayList<IRecurso>
- podeAlterarOrdem: bool
---
+ Modulo()
+ calculaComplexidade(): int
+ move(idRecurso: int, novaPosicao: int): void
+ toString(): String
---"
13,"ModuloController
composes Modulo
---
- modulos:ArrayList<Modulo>
// <identificador do Modulo , posiçao no arrayList>
- posicaoModulo:HashMap<int,int>
---
+ ModuloController()

//Na hora de criar um modulo e não gerar conflito no código de modulo
//Podemos usar métodos diferentes de gerar, talvez todos os impares fossem módulos e
//todos pares são recursos
//Ou podemos optar passar como parametro no construtor o RecursoController para fazer a checagem
//Mas acredito que usar formas diferentes de calcular o código de Modulo e Recursos sejá mais prático.
+ cadastraModulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int

+ exibeModulo(idModulo: int): String
+ pegaComplexidadeModulo(idModulo: int): int
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void

+ setObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ getObrigatoriedade(idModulo:int):boolean
---

Modulo
---
- nome:String

//Ordem dos recursos do Modulo
- recursos:ArrayList<RecursoEducacional>

//Guardo os Ids do recursos já cadastrados.
- recursosCadastrados:HashSet<int>
- complexidade:int
- codigo:int
- obrigatorio:boolean
---

+ Modulo(nome:String)

+ adicionaRecurso(idRecurso:int,recurso:RecursoEducacional):void
+ existeRecurso(idRecurso:int):boolean

+ setObrigatoriedade(obrigatorio: boolean): void
+ getObrigatoriedade():boolean

+ move(idRecurso: int, novaPosicao: int): void
+ pegaComplexidadeModulo(): int
+ toString():String
---

 

RecursoEducacionalController
composes RecursoEducacional <Abstract>
---
- recursos:HashMap<int,RecursoEducacional>
---
+ RecursoEducacionalController()
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(idRecurso: int): int
+ exibe(idRecurso: int): String
---

RecursoEducacional <Abstract>
---
- codigo:int
---
+ getComplexidade():int
//Identificado do RecursoEducacional.
+ setCodigo():int
+ getCodigo():int
+ hashCode():int
+ equals(OutroObj: Object): boolean
+ toString():String
---

Video
extends RecursoEducacional <Abstract>
---
- url:String
- duracao:int
---
+ Video(url:String, duracao:int)
+ getComplexidade():int
+ toString():String
---

Texto
extends RecursoEducacional <Abstract>
---
- texto:String
---
+ Texto(texto:String)
+ getComplexidade():int
+ toString():String
---

Teste
extends RecursoEducacional <Abstract>
---
- perguntas:String[]
---
+ Teste(perguntas:String[])
+ getComplexidade():int
+ toString():String
---

UsuarioControler
composes Usuario
---
- usuarios:HashMap<String,Usuario>
---
+ UsuarioControler()
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String

+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String

---

Usuario
---
- email:String
- url:String
- nome:String
- matricula:String
// <idModulo, Lista de recursos acessados.
- acessos:HashMap<int,ArrayList<RecursoEducacional>>
- modulosAcessivel:HashMap<int,boolean>

---
+ Usuario(email:String, url:String, nome:String, matricula:String)

+ registraAcesso(idModulo: int, idRecurso: int): void
+ ehAcessivel(idModulo: int, idRecurso: int): boolean
+ listaAcessos(): String

+ getEmail():String
+ hashCode():int
+ equals(OutroObj: Object): boolean
+ toString():String
---

 

Facade
composes UsuarioControler
composes RecursoEducacionalController
composes ModuloController
---
- usuarios:UsuarioControler
- recursos:RecursoEducacionalController
- modulos:ModuloController
---
+ Facade()

+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String

+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void

+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String

+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---"
14,"Main
---
---
---

Facade
association Main
---
- controllerUsuario: ControllerUsuario
- controllerRecursosUsuario: ControllerRecursosUsuario
- controllerModuloAcesso: ControllerModuloAcesso
---
+ Facade()
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ getComplexidade(id: int): int
+ exibe(id: int): String
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ getComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

ControllerRecursosUsuario
association Main
association Facade
---
- videoMap: HashMap<Video>
- textoMap: HashMap<Texto>
- perguntaMap: HashMap<Pergunta>
- usuarioMap : HashMap<Usuario>
---
+ ControllerRecursosUsuario()
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ getComplexidade(id: int): int
+ exibe(id: int): String
+ hashCode(): int
+ equals(): boolean
---

Video
association ControllerRecursosUsuario
---
- id:int
- url: String
- duracao: int
- complexidade: int
---
+ Video()
+ complexidade(duracao: int): void
+ toString():String
---

Texto
association ControllerRecursosUsuario
---
- id: int
- texto: String
- complexidade: int
---
+ Texto()
+ complexidade(texto: String): void
+ toString():String
+ hashCode(): int
+ equals(): boolean
---

Teste
association ControllerRecursosUsuario
---
- id:int
- Perguntas[]: String
- complexidade: int
---
+ Teste()
+ complexidade(perguntas[]:String): void
+ hashCode(): int
+ equals(): boolean
+ toString():String
---

Usuario
association ControllerRecursosUsuario
association ControllerUsuario
---
- email: String
- url: String
- nome: String
- matricula: String
- acessosList : ArrayList<String>
---
+ Usuario()
+ listaAcessos(): String
+ hashCode(): int
+ equals(): boolean
+ toString(): String
---

ControllerUsuario
association Facade
association Main
---
---
+ ControllerUsuario()
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
---

ControllerModuloAcesso
association Facade
association Main
association ControllerRecursosUsuario
---
- modulos: HashMap<Modulo>
---
+ ControllerModuloAcesso()
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ getComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

Modulo
association ControllerModuloAcesso
association Usuario
---
- id : int
- nome: String
- complexidade: int
- recursosList: List<Recursos>
---
+ Modulo()
+ move(idRecurso: int, novaPosicao: int): void
+ setComplexidade(): void
+ toString(): String
+ hashCode(): int
+ equals(): boolean
---"
15,"ControleRecursosEducacionais
association ControleGeral
----
- url: String
- duracao: int
- texto: String
- perguntas: ArrayList<String>
----
+ ControleRecursosEducacionais()
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
----
RecursosEducacionais
association ControleRecursosEducacionais
----
- url: String
- duracao: int
----
+ RecursosEducacionais()
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
----
Usuario
association ControleUsuario
----
- email: String
- nome: String
- matricula: String
----
+ Usuarios(email: String, nome: String, matricula: String)
+ getEmail(): void
+ getNome(): void
+ getMatricula(): void
----
ControleUsuario
association ControleGeral
----
- usuarios: HashMap<String, Usuario>
----
+ ControleUsuarios()
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
----
Modulo
association ControleModulo
----
- idModulo: String
----
+ Modulo()
+ toString(): String
+ exibirModulo(idModulo: int): String
----
ControleModulo
association ControleGeral
----
- modulo: HashMap<int, int>
----
+ ControleModulo()
+ cadastraModulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ confirmaCadastro(idModulo:int): boolean
+ pegaComplexidadeModulo(idModulo: int): int
----
ControleGeral
association Facade
----
- controleUsuario: ControleUsuario
- controleRecursosEducacionais: ControleRecursosEducacionais
- controleModulo: ControleModulo
- obrigatorio: boolean
----
+ ControleGeral()
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
----
Facade
association Main
----
----
+ cadastraModulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ confirmaCadastro(idModulo:int): boolean
+ pegaComplexidadeModulo(idModulo: int): int
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
----
Main
----
----
----"
16,"Main
association Facade
---
---
---

Facade
association RecursoController
association UsuarioController
association ModuloController
---
- recursoController: RecursoController
- usuarioController: UsuarioController
---
+ Facade()
+ cadastraVideo(): int
+ cadastraTexto(): int
+ cadastraPergunta(): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
---

//--------------------------- Recursos ---------------------------

RecursoRepository
composes Recurso
---
- recursos: HashMap<Integer, Recurso>
---
+ saveVideo(url: String, duracao: int): Recurso
+ saveTexto(texto: String): Recurso
+ saveTeste(perguntas: String[]): Recurso
+ getRecurso(id: int): Recurso
- geraId(): int
---

RecursoController
composes RecursoRepository
---
- recursos: RecursoRepository
---
+ RecursoController()
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraTeste(perguntas: String[]): int
+ getComplexidade(id: int): int
+ getRecurso(id: int): Recurso
---

Recurso //<Abstract>
---
- id: int
# complexidade: int
---
+ Recurso(id: int)
# setComplexidade(): void //Abstract
+ getComplexidade(): int
+ getId(): int
+ hashCode(): int
+ equals(): boolean
---

Video
extends Recurso
---
- duracao: int
- url: String
---
+ Video(id: int, url: String, duracao: int)
+ getUrl(): String
# setComplexidade(): void
+ toString(): String
---

Texto
extends Recurso
---
- texto: String
---
+ Texto(id: int, texto: String)
+ getTexto(): String
# setComplexidade(): void
+ toString(): String
---

Teste
extends Recurso
---
- perguntas: String[]
---
+ Teste(id: int, perguntas: String[])
+ getPerguntas(): String[]
# setComplexidade(): void
+ toString(): String
---

//--------------------------- Usuario ---------------------------

UsuarioRepository
composes Usuario
---
- usuarios: HashMap<String, Usuario>
---
+ save(email: String, url: String, nome: String, matricula: String): Usuario
+ getUsuario(email: String): Usuario
---

UsuarioController
composes UsuarioRepository
---
- usuarios: UsuarioRepository
---
+ cadastra(email: String, url: String, nome: String, matricula: String): void
+ getUsuario(email: String): Usuario
---

Usuario
---
- email: String
- url: String
- nome: String
- matricula: String
---
+ Usuario(email: String, url: String, nome: String, matricula: String)
+ toString(): String
---

//--------------------------- Modulo ---------------------------

ModuloRepository
composes Modulo
---
- modulos: HashMap<int, Modulo>
---
+ ModuloRepository()
+ save(nome: String): Modulo
+ getModulo(id: int): Modulo
---

ModuloController
composes ModuloRepository
---
- moduloRepository: ModuloRepository
---
+ cadastra(nome: String): int
+ adicionaRecurso(idModulo: int, recurso: Recurso): int
+ getComplexidade(id: int): int
+ getModulo(id: int): Modulo
+ move(idModulo: int, idRecurso: int, posicao: int)
+ atualizaObrigatoriedade(idModulo: int, obrigatorio: boolean): void
---

Modulo
---
- id: int
- complexidade: int
- nome: String
- obrigatoriedade: boolean
- recursos: ArrayList<Recurso>
---
+ Modulo(nome: String)
+ setObrigatoriedade(obrigatorio: boolean): void
+ setRecurso(recurso: Recurso): void
+ getComplexidade(): int
+ getRecursos(): ArrayList<Recursos>
+ geraId(): int
+ setComplexidade(): void
+ alternaRecurso(id: int, novaPosicao: int)
+ toString(): String
---

// ---------- Acesso -------------"
17,"// classe main
Main
association Facade
---
---
---

//classe fachada, facade
Facade
composes ControladorEeei
---
//controlador
- eeei: ControladorEeei
---
// Construtor da classe
+ Facade()
// cadastra um video usando uma url e sua duração, gera um grau de complexidade no processo e retorna a identificação do recurso
+ cadastraVideo(url: str, duracao: int): int
// cadastra um texto, gera um grau de complexidade no processo e retorna a identificação do recurso
+ cadastraTexto(texto: str): int
//cadastra uma ou mais perguntas, gera um grau de complexidade no processo e retorna a identificação do recurso
+ cadastraPergunta(perguntas: str[]): int
// recebe a identificação de um recurso e retorna sua complexidade
+ pegaComplexidade(id: int): int
// recebe a identificação de um recurso e retorna sua reepresentação textual
+ exibe(id: int): str
// cadastra um usuario pelo seu email, uma URL com sua foto, seu nome e sua matrícula.
+ cadastraUsuario(email: str, url: str, nome: str, matricula: str): void
// retorna a representação textual de um usuario, dado seu email
+ exibeUsuario(email: str): str
// cadastra um modulo, dado seu nome e retorna a identificação do mesmo
+ cadastraMódulo(nome: str): int
// recebe a identificação de um modulo e adciona uma identificação de um recurso no mdulo, gerando uma nova id
+ adicionaRecurso(idModulo: int, idRecurso: int): int
// dado a identificação do modulo retorna sua complexidade
+ pegaComplexidadeModulo(id: int): int
// dado a identificacação do modulo retorna sua representação textual
+ exibeModulo(id: int): str
//altera a ordem de acesso de um modulo, dado sua id, a id do recurso e a nova posição
+ moveRecursoNoModulo(idModulo: int, idRecurso: int, novaPosicao: int): void
// permite ordenar os recursos de um módulo de acordo com uma sequencia, ou não.
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
// registra o acesso de um usuário a determinado recurso
+ registraAcesso(idModulo: int, idRecurso: int, email: str): void
// verifica se o usuário tem acesso a determinado recurso
+ ehAcessivel(idModulo: int, idRecurso: int, email: str): boolean
// exibe os ids dos recursos (com o respectivo id do módulo) já acessados pelo usuário.
+ listaAcessos(email: str): str
---

//Controlador do sistema, e repositorio
ControladorEeei
composes RecursoEducacional <interface>
composes Usuario
composes Modulo
composes Acessos
---
// guarda os recursos educacionais
- recursosEducacionais: HashMap<id, RecursoEducacional>
// guarda os usuarios
- usuarios: HashMap<email, Usuario>
// gurada os modulos
- modulos: HashMap<id, Modulo>
// gurada o historico de acessos
- historicoDeAcessos: HashMap<emailUsuario, Acessos>
---
// consstrutor
+ ControladorEeei()
// cadastra um video usando uma url e sua duração, gera um grau de complexidade no processo e retorna a identificação do recurso
+ cadastraVideo(url: str, duracao: int): int
// cadastra um texto, gera um grau de complexidade no processo e retorna a identificação do recurso
+ cadastraTexto(texto: str): int
//cadastra uma ou mais perguntas, gera um grau de complexidade no processo e retorna a identificação do recurso
+ cadastraPergunta(perguntas: str[]): int
// recebe a identificação de um recurso e retorna sua complexidade
+ pegaComplexidade(id: int): int
// recebe a identificação de um recurso e retorna sua reepresentação textual
+ exibe(id: int): str
// cadastra um usuario pelo seu email, uma URL com sua foto, seu nome e sua matrícula.
+ cadastraUsuario(email: str, url: str, nome: str, matricula: str): void
// retorna a representação textual de um usuario, dado seu email
+ exibeUsuario(email: str): str
// cadastra um modulo, dado seu nome e retorna a identificação do mesmo
+ cadastraMódulo(nome: str): int
// recebe a identificação de um modulo e adciona uma identificação de um recurso no mdulo, gerando uma nova id
+ adicionaRecurso(idModulo: int, idRecurso: int): int
// dado a identificação do modulo retorna sua complexidade
+ pegaComplexidadeModulo(id: int): int
// dado a identificacação do modulo retorna sua representação textual
+ exibeModulo(id: int): str
//altera a ordem de acesso de um modulo, dado sua id, a id do recurso e a nova posição
+ moveRecursoNoModulo(idModulo: int, idRecurso: int, novaPosicao: int): void
// permite ordenar os recursos de um módulo de acordo com uma sequencia, ou não.
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
// registra o acesso de um usuário a determinado recurso
+ registraAcesso(idModulo: int, idRecurso: int, email: str): void
// verifica se o usuário tem acesso a determinado recurso
+ ehAcessivel(idModulo: int, idRecurso: int, email: str): boolean
// exibe os ids dos recursos (com o respectivo id do módulo) já acessados pelo usuário.
+ listaAcessos(email: str): str
//atualiza o id
- atualizaId(id:int): int
---

// interface dos recursos educacionais
RecursoEducacional <interface>
---
---
//metodo que pega a complexidade de um recurso, dado seu id
+ pegaComplexidade(id: int): int
---
// um dos recursos educacionais, o video
Video
implements RecursoEducacional <interface>
---
// url do video
- url: str
// duração do video
- duracao : int
// identificação do video
- id: int
---

// construtor, usa o url do video, sua duração e gera um id no porcesso
+ Video(url: str, duracao: int)
// retorna a complexidade
+ pegaComplexidade(): int
// retorna o id
+ getId(): int
// hashcode
+ hashCode(): int
// equals
+ equals(o: Object): boolean
// representação textual de um video
+ toString(): str
//atualiza o id
- setId(id:int): int
---
// recurso educacional texto
Texto
implements RecursoEducacional <interface>
---
//texto
- texto: str
// id do texto
- id: str
---
// construtor, usa um texo e gera um id no processo
+ Texto(texto: str)
// retorna a complexidade
+ pegaComplexidade(): int
// hashcode
+ hashCode(): int
//equals
+ equals(o: Object): boolean
//representação textual de um texto
+ toString(): str
//atualiza o id
- setId(id:int): int
---
// recurso educacional teste
Teste
implements RecursoEducacional <interface>
---
// perguntas
- perguntas: str[]
// identificação do teste
- id: int
---
//contrutor, gera um id no processo
+ Teste(perguntas: str[])
// retorna a complexidade
+ pegaComplexidade(): int
// hashcode
+ hashCode(): int
// equals
+ equals(o: Object): boolean
// retorna a representação textual de um teste
+ toString(): str
//atualiza o id
- setId(id:int): int
---

// classe responsavel pela criação de um usuario
Usuario
---
// email
- email: str
// url que guarda a foto do usuario
- url: str
// nome
- nome: str
//matricula
- matricula: str
---
// construtor, usa um email, um utl que guarda uma foto, um nome e matricula
+ Usuario(email: str, url: str, nome: str, matricula: str)
//hashcode
+ hashCode(): int
//equals
+ equals(o: Object): boolean
//representação textual de um usuario
+ toString(): str
//atualiza o id
- setId(id:int): int
---

// classe responsavel por um modulo
Modulo
---
// nome
- nome: str
// identificação d
- id: int
// guarda os recursos educacionais
- recursosEducaionais: List<id, RecursoEducacional>
// Se é importante a obrigatoriedade ou não
- ordemDosRecursosObrigatoriedade: boolean
---
// construtor
+ Modulo(nome: str, id: int)
// adiciona um recurso a um modulo
+ adicionaRecurso(id: int, recursoEducacional: RecursoEducacional): int
// pega a complexidade
+ pegaComplexidade(): int
// move o recurso para uma nova posição
+ moveRecurso(idRecurso: int, novaPosicao: int): void
// muda a importancia da obrigatoriedade
+ setOrdemDosRecursosObrigatoriedade(obrigatoriedade: boolean): void
// pega o booleano que representa se é importante ou não a ordem
+ getOrdemDosRecursosObrigatoria(): boolean
// pega o id dos recursos
+ getIdRecusos(): int[]
// gashcode
+ hashCode(): int
//equals
+ equals(o: Object): boolean
// representação textual de um modulo
+ toString(): str
---
// ""repositorio"" de acesso para usuario
Acessos
composes Acesso
---
// representa um usuario
- email: str
// guarda os acessos
- acessos: HashMap<idModulo, Acesso>
---
//construtor
+ Acessos(emailUsuario: str)
// cadastra um acesso
+ cadastraAcesso(emailUsuario: str, idModulo: int): void
//regista o acesso a um recurso educacional
+ registraAcessoRecursoEducacional(idModulo: int, id: recurso): void
// retorna o acesso
+ getAcesso(idModulo: int): Acesso
//hashcode
+ hashCode(): int
// equals
+ equals(o: Object): boolean
// retorna a representação de todos os acessos do usuario
+ toString(): str // Retorna a exibição de todos os acessos do usuário.
---
// representação de um acesso
Acesso
---
// email do usuario
- emailUsuario: str
// modulo acessado
- idModulo: int
// guarda os recursos educacionais do modulo
- idRecursosEducacionais: List<Integer>
---
// construtor
+ Acesso(emailUsuario: str, idModulo: int)
// registra um acesso
+ registraAcessoRecursoEducacional(idRecurso: recurso): void
// retorna o id de todos os recursos do modulo
+ getIdRecursos(): int[]
//hashcode
+ hashCode(): int
// equals
+ equals(O: Object): boolean
// representação textual de um acesso
+ toString(): str
---"
18,"ModuloController
association ControllerCentral
composes Modulo
---
- String: nome
---
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, RecursoEducacional: recurso): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
---

RecursoEducacional
---
- int: complexidade
- int: idRecurso
---
+ cadastraId():void
+ getIdRecurso(): int
+ getComplexidade(): int
+ setComplexidade(): void
+ calculaComplexidade(): void
---

Video
extends RecursoEducacional
---
- String: url
- int: duracao
---
+ Video(String: url, int: duracao)
+ calculaComplexidade(): void
+ equals(Object: o): boolean
+ hashCode(): int
+ toString(): String
---

Texto
extends RecursoEducacional
---
- String: texto
---
+ Texto(String: texto)
+ calculaComplexidade(): void
+ equals(Object: o): boolean
+ hashCode(): int
+ toString(): String
---

Teste
extends RecursoEducacional
---
- String: perguntas[]
---
+ Teste(String: perguntas[])
+ calculaComplexidade(): void
+ equals(Object: o): boolean
+ hashCode(): int
+ toString(): String
---

RecursoEducacionalController
composes RecursoEducacional
association ControllerCentral
---
- HashMap<int,RecursoEducaional>: recursoEducacional
---
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ getRecurso(id: int): RecursoEducaional
---

Usuario
---
- String: email
- String: url
- String: nome
- String: matricula
- HashMap<int,ArrayList<int>>: acessos
---
+ Usuario(String: email, String: url, String: nome, String: matricula)
+ getEmail(): String
+ registraAcesso(idModulo: int, idRecurso: int): void
+ ehAcessivel(idModulo: int, idRecurso: int): boolean
+ listaAcessos(): String
+ equals(Object: o): boolean
+ hashCode(): int
+ toString(): String
---

UsuarioController
composes Usuario
association ControllerCentral
---
- HashMap<String,Usuario>: usuario
---
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

Modulo
aggregates RecursoEducacional
---
- ArrayList<RecursoEducacional>: recursos
- int: complexidade
- int: idModulo
- boolean: obrigatorio
---
+ Modulo(String: nome)
+ adicionaRecurso(RecursoEducacional: recurso): void
+ getIdModulo(): int
+ geraIdModulo(): void
+ getComplexidade(): int
+ calculaComplexidade(): void
+ move(idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(obrigatorio: boolean): void
+ equals(Object: o): boolean
+ hashCode(): int
+ toString(): String
---

ControllerCentral
association Facade
---
- ModuloController: moduloController
- UsuarioController: usuarioController
- RecursoEducacionalController: recursoEducacionalController
---
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

Facade
---
- ControllerCentral: controllerCentral
---
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---"
19,"ControladorPrincipal
composes RecursoEducacional<Interface>
composes ControllerUsuario
composes ControllerModulo
---
- recursosEducacionais: HashMap<int, RecursoEducacional>
- usuarios: ControllerUsuario
- modulos: ControllerModulo
---
+ ControladorPrincipal()
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

RecursoEducacional<Interface>
---
---
+ pegaComplexidade(): int
- hashCode(): int
- equals(): int
+ toString(): String
---

Video
implements RecursoEducacional<Interface>
---
- url: String
- duracaoVideo: int
- complexidade: int
- id: int
---
+ Video(url: String, duracao: int)
+ pegaComplexidade(): int
- hashCode(): int
- equals(): int
+ toString(): String
---

Texto
implements RecursoEducacional<Interface>
---
- texto: String
- complexidade: int
- id: int
---
+ Texto(texto: String)
+ pegaComplexidade(): int
- hashCode(): int
- equals(): int
+ toString(): String
---

Pergunta
implements RecursoEducacional<Interface>
---
- perguntas: String[]
- complexidade: int
- id: int
---
+ Pergunta(perguntas: String[])
+ pegaComplexidade(): int
- hashCode(): int
- equals(): int
+ toString(): String
---

ControllerUsuario
composes Usuario
---
- usuarios: HashMap<String, Usuario>
---
+ ControllerUsuario()
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

Usuario
---
- email: String
- urlFoto: String
- nome: String
- matricula: int
- acessos: ArrayList<Integer>
---
+ Usuario(email: String, url: String, nome: String, matricula: String)
+ registraAcesso(idModulo: int, idRecurso: int): void
+ listaAcessos(): String
- hashCode(): int
+ ehAcessivel(idModulo: int, idRecurso: int): boolean
- equals(): int
+ toString(): String
---

Modulo
composes RecursoEducacional<Interface>
---
- nomeModulo: String
- complexidade: int
- recursos: ArrayList<RecursoEducacional>
- ordemObrigatoria: boolean
---
+ Modulo(nome: String)
+ adicionaRecurso(recurso: RecursoEducacional): int
+ verificaExistenciaRecurso(idRecurso: int): boolean
+ pegaComplexidadeModulo(): int
+ move(idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(obrigatorio: boolean): void
+ ehObrigatorio(): boolean
- hashCode(): int
- equals(): int
+ toString(): String
---

ControllerModulo
composes Modulo
---
- modulos: HashMap<int, Modulo>
---
+ ControllerModulo()
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(idModulo: int): int
+ verificaExistenciaRecurso(idModulo: int, idRecurso: int): boolean
+ pegaComplexidadeModulo(): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ verificaExistenciaModulo(idModulo: int): boolean
+ verificaExistenciaRecurso(idModulo: int, idRecurso: int): boolean
+ ehObrigatorio(idModulo: int): boolean
---

Facade
composes ControladorPrincipal
---
- ControladorPrincipal : ControladorPrincipal
---
+ Facade()
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---"
20,"Facade
composes ControllerGeral
---
---
---

ControllerGeral
composes RecursoEducacionalInterface
composes Modulo
composes Usuario
---
- recursos: Map<int, RecursoEducacionalInterface>
- modulos: Map<String, Modulo>
- chavesGeradas: ArrayList<int>
- usuarios: Map<String, Usuario>
---
+ ControllerGeral()
- getChaveInteiroAleatorio(): int
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ listaAcessos(email: String): String
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
---

RecursoEducacionalInterface
---
---
+ getComplexidade(): int
+ toString(): String
+ hashCode(): int
+ equals(o: Object): boolean
---

Video
implements RecursoEducacionalInterface
---
- url: String
- duracaoVideo: int
- complexidade: int
- id: int
---
+ Video(url: String, duracao: int)
+ getComplexidade(): int
+ toString(): String
+ getId(): int
+ hashCode(): int
+ equals(o: Object): boolean
---

Texto
implements RecursoEducacionalInterface
---
- texto: String
- complexidade: int
- id: int
---
+ Texto(texto: String)
+ getComplexidade(): int
+ toString(): String
+ getId(): int
+ hashCode(): int
+ equals(o: Object): boolean
---

Teste
implements RecursoEducacionalInterface
---
- perguntas: String[]
- id: int
- complexidade: int
---
+ Teste(perguntas: String[])
+ getComplexidade(): int
+ toString(): String
+ getId(): int
+ hashCode(): int
+ equals(o: Object): boolean
---

Usuario
association Modulo
---
- email: String
- url: String
- nome: String
- matricula: String
- id: int
- recursosAcessados: ArrayList<RecursoEducacionalInterface>
---
+ Usuario(email: String, url: String, nome: String, matricula: String)
+ registraAcesso(r: RecursoEducacionalInterface): void
+ toString(): String
+ getAcessados(): ArrayList<RecursoEducacionalInterface>
+ getId(): int
+ listaAcessos(): String
+ ehAcessivel(): boolean
+ hashCode(): int
+ equals(o: Object): boolean
---

Modulo
association RecursoEducacionalInterface
---
- recursos: ArrayList<RecusoEducacionalInterface>
- nome: String
- complexidade: int
- obrigatorio: boolean
---
+ Modulo(nome: String)
+ recebeRecurso(r: RecursoEducacionalInterface): void
+ move(r: RecursoEducacionalInterface, novaPosicao: int): void
+ toString(): String
+ getComplexidade(): int
+ defineObrigatoriedade(obrigatorio: boolean): void
+ getRecursos(): ArrayList<RecusoEducacionalInterface>
+ ehAcessivel(): boolean
+ hashCode(): int
+ equals(o: Object): boolean
---"
21,"Main
---
---
---
Facade
association Main
---
- controlerRecursosUsuario: ControllerRecursosUsuario
- controlerModuloAcesso: ControlerModuloAcesso
- controlerUsuario: ControlerUsuario
---
+ Facade()
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String

---
ControleRecursos
association Facade
---
- video: HashMap<Video>
- texto: HashMap<Texto>
- pergunta: HashMap<Pergunta>
---
+ ControleRecursosUsuario()
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String

---
Video
association ControleRecursos
---
- id:int
- url: String
- duracao: int
- complexidade: int
---
+ Video()
+ complexidade(duracao: int): void
+ toString():String
---
Texto
association ControleRecursos
---
- id:int
- texto: String
- complexidade: int
---
+ Texto()
+ complexidade(texto: String): void
+ toString():String
---
Teste
association ControleRecursos
---
- id:int
- Perguntas[]: String
- complexidade: int
---
+ Teste()
+ complexidade(perguntas[]:String): void
+ toString():String
---
ControlerUsuario
association Facade
association ControleRecursos
association Usuario
---
- usuarios: HashMap<Usuario>
---
+ ControlerUsuario()
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String

---
Usuario
---
- email: String
- url: String
- nome: String
- matricula: String
- acessos : ArrayList<String>
---
+ Usuario()
+ registraAcesso(idModulo: int, idRecurso: int): void
+ ehAcessivel(idModulo: int, idRecurso: int): boolean
+ listaAcessos(): String
+ toString(): String
---
ControlerModuloAcesso
association Facade
association ControleRecursos
association ControlerUsuario
---
- modulos: HashMap<Modulo>

---
+ ControlerModuloAcesso()
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void

---
Modulo
association ControlerModuloAcesso
---
- id : int
- nome: String
- complexidade: String
- recursos: ArrayList<Recursos>
---
+ Modulo()
+ complexidade(): void
+ move(idRecurso: int, novaPosicao: int): void
+ toString(): String
---"
22," 

Main
association RecursosController
association ModulosController
---
---
---

RecursosController
composes BancoDeDados
---
- bancoDeDados: BancoDeDados
---
+ RecursosController()
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
---

Recurso <Interface>
---
---
+ toString(): String
+ hashCode(): int
+ equals(o: Object): boolean
+ pegaComplexidade(id: int): int
+ compareTo(o1: Recurso, o2: Recurso): int
---

 

Usuario
---
- email: String
- url: String
- nome: String
- matricula: String
---
+ Usuario(email: String, url: String, nome: String, matricula: String)
+ toString(): String
+ hashCode(): int
+ equals(o: Object): boolean
---

Video
implements Recurso <Interface>
---
- url: String
- duracao: int
- complexidade: int

---
+ Video(url: String, duracao: int, complexidade: int)
+ toString(): String
+ hashCode(): int
+ equals(o: Object): boolean
+ pegaComplexidade(id: int): int
---

Texto
implements Recurso <Interface>
---
- texto: String
- complexidade: int
---
+ Texto(texto: String, complexidade: int)
+ toString(): String
+ hashCode(): int
+ equals(o: Object): boolean
+ pegaComplexidade(id: int): int
---

Teste
implements Recurso <Interface>
---
- perguntas: String[]
- complexidade: int
---
+ Usuario(perguntas: String [], complexidade: int)
+ toString(): String
+ hashCode(): int
+ equals(o: Object): boolean
+ pegaComplexidade(id: int): int
---

ModulosController
composes BancoDeDados
---
- bancoDeDados: BancoDeDados
---
+ ModulosController()
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

BancoDeDados
composes Usuario
composes Recurso <Interface>
composes Modulo
---
- modulos: hashMap<int, Modulo>
- recursos: hashMap<int, Recurso>
- usuarios: hashMap<String, Usuario>
---
+ getUsuario(email: String): Usuario
+ getRecuso(id: int): Recurso
+ getModulo(id: int): Modulo
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
---

Modulo
---
- complexidade: int
- int: id
- nome: String
- recursos: ArrayList<Recurso>
---
+ Modulo(nome: String, int: id, complexidade: int)
+ adicionaRecurso(recurso: Recurso): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ pegaComplexidadeModulo(): void
+ move(novaPosicao: int): void
+ defineObrigatoriedade(obrigatorio: boolean): void
+ toString(): String
+ hashCode(): int
+ equals(o: Object): boolean
+ compareTo(o1: Modulo, o2: Modulo): int
---"
23,"//O programa principal EEEI! significa Ensino Eletrônico e Eficiente de Idiomas é o sistema que tem como objetivo de introduzir o aprendizado de idiomas aos usuários.

EEEI!
---
---
---

// Fachada do sistema, que indica ao programa principal, os comandos importantes que influencia diretamente no sistema.

Facade
association ControladorCentral
association EEEI!
---
- cc: ControladorCentral
---
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int,idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

// O controlador central tem como objetivo associar todos os controladores do sistema e manipular seus métodos por meio da interação entre todas as classes.

ControladorCentral
association ControladorEducacional
association ControladorUsuario
association ControladorModulo
---
- crc: ControladorEducacional
- cus: ControladorUsuario
- cmd: ControladorModulo
---
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int,idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

//o controlador educacional tem como responsabilidade administrar os recursos educacionais, que podem ser cadastrados e armazenados por um id único.

ControladorEducacional
aggregates Recurso
---
- recursos: HashMap<Integer, Recurso>
---
+ ControladorEducacional()
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ getRecurso(idRecurso: int): Recurso
---

// Recurso é uma interface que permite mais polimorfismo na manipulação do objeto RecursoEducacional.
Recurso
---
---
+ getComplexidade(): int
---

// O recurso educacional é uma classe abstrata que representa um recurso de ensino que serve como parte do aprendizado, possuindo complexidade.Podendo ser vídeo, texto ou teste.

RecursoEducacional<Abstract>
implements Recurso
---
- complexidade: int
---
+ getComplexidade(): int
+ toString(): String
+ hashCode(): int
---

// Vídeo é recurso educacional do sistema, que possui URL e uma duração do vídeo em segundos.

Video
extends RecursoEducacional<Abstract>
---
- url: String
- duracao: int
---
+ Video(url: String, duracao: int)
- defineComplexidade(url: String, duracao: int): int
+ toString(): String
---

//Texto é uma forma de aprendizado, que é um recurso no sistema, e possui o próprio texto.

Texto
extends RecursoEducacional<Abstract>
---
- textoEscrito: String
---
+ Texto(textoEscrito: String)
- defineComplexidade(textoEscrito: String): int
+ toString(): String
---

// Teste é recurso educacional, e tem como base o aprendizado por meio das perguntas.

Teste
extends RecursoEducacional<Abstract>
---
- perguntas: String[]
---
+ Teste(perguntas: String[])
- defineComplexidade(perguntas: String[]): int
+ toString(): String
---

// O controlador usuário tem a responsabilidade de cuidar dos usuários, eles são armazenados com chaves que representam o usuário, o email.

ControladorUsuario
composes Usuario
---
- usuarios: HashMap<String, Usuario>
---
+ ControladorUsuario()
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ registraAcessoUsuario(acesso: Acesso): void
---

// O usuário no sistema, é um elemento essencial que permite acessar os recursos contidos nos módulos, também possui nome, mátricula e url com sua foto, é identificado pelo seu email.

Usuario
composes Acesso
---
- email: String
- nome: String
- matricula: String
- url: String
- acessos: HashSet<Acesso>
---
+ Usuario(email: String, url: String, nome: String, matricula: String)
+ registraAcesso(acesso: Acesso): void
+ toString(): String
+ hashCode(): int
---

// O controlador Módulo tem a responsabilidade de cuidar dos módulos, que são armazenados com o seu id, que é criado durante o cadastramento, o ID é único, não pode ser um ID já cadastrado em recursos.

ControladorModulo
composes Modulo
---
- modulos: HashMap<Integer, Modulo>
---
+ ControladorModulo()
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, recurso: Recurso): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, recurso: Recurso, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
---

// O módulo é onde ficam armazenados os recursos educacionais que os usuários podem acessar, podendo ter ordem de acesso por meio da obrigatoriedade definida, tem como caracteristicas o nome e a complexidade criada por meio dos recursos registrados aqui.

Modulo
aggregates Recurso
---
- nome: String
- complexidade: int
- recursos: ArrayList<Recurso>
- obrigatoriedade: boolean
---
+ Modulo(nome: String)
+ adicionaRecurso(recurso: Recurso): void
- verificaRecurso(recurso: Recurso): boolean
+ getComplexidade(): int
- defineComplexidade(recursos: ArrayList<Recurso>): int
+ moveRecurso(recurso: Recurso, novaPosicao: int): void
+ defineObrigatoridade(obrigatorio: boolean): void
+ getObrigatoriedade(): boolean
+ getRecurso(index: int): Recurso
+ hashCode(): int
+ toString(): String
---

// O acesso é verificação de que um usuário acessou tal recurso em certo módulo.

Acesso
---
- idmodulo: int
- idrecurso: int
- email: String
---
+ Acesso(idModulo: int, idRecurso: int, email: String)
+ getIDmodulo(): int
+ getIDrecurso(): int
+ hashCode(): int
---"
24,"Facade
association ControlerEEEI
---
- ce: ControlerEEEI
---
+ Facade()
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id:int):int
+ exibe(id:int):String
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

ControlerEEEI
composes RecursoEducacional <Interface>, Usuario, Modulo
---
- recursos: Map<int, RecursoEducacional>
- usuarios: Map<String, Usuario>
- modulos: Map<int, Modulo>
---
+ ControlerEEEI()
// gera um inteiro que não exista entre os dois mapas (recursos
// e modulos)
- geradorId(): int
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id:int):int
+ exibe(id:int):String
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

// aqui os metodos de Object estão na interface apenas para
// definir que qualquer recurso deve implementá-los
RecursoEducacional <Interface>
---
---
+ equals(o: Object): boolean
+ hashCode(): int
+ getComplexidade():int
+ toString():String
---

// Dois videos são iguais se tiverem a mesma URL
Video
implements RecursoEducacional <Interface>
---
- URL: String
- duracao: int
---
+ Video(url: String, duracao: int)
+ getURL(): String
+ getDuracao(): int
+ equals(o: Object): boolean
+ hashCode(): int
+ getComplexidade():int
+ toString():String
---

// Dois textos são iguais se seus conteudos forem iguais
Texto
implements RecursoEducacional <Interface>
---
- conteudo: String
---
+ Texto(texto: String)
+ equals(o: Object): boolean
+ getTexto(): String
+ hashCode(): int
+ getComplexidade():int
+ toString():String
---

// Perguntas são iguais se suas perguntas forem iguais
Pergunta
implements RecursoEducacional <Interface>
---
- perguntas: String[]
---
+ Pergunta(perguntas: String[])
+ equals(o: Object): boolean
+ hashCode(): int
+ getComplexidade():int
+ toString():String
---

Usuario
---
- email: String
- url: String
- nome: String
- matricula: String
// Map com chave = id do modulo, valor=ordem do ultimo maior
// recurso acessado
- acessos: Map<Modulo, Integer>
---
+ Usuario(email: String, url: String, nome: String, matricula: String)
+ getEmail(): String
+ setEmail(novoEmail: String): void
+ getURL(): String
+ setURL(novaURL: String): void
+ getNome(): String
+ setNome(novoNome: String): void
+ getMatricula(): String
+ registraAcesso(mod: Modulo, ordemRecurso: int): void
+ ehAcessivel(mod: Modulo, ordemRecurso: int): boolean
+ listaAcessos(): String
+ equals(o: Object): boolean
+ hashCode(): int
+ toString(): String
---

Modulo
aggregates RecursoEducacional <Interface>
---
- nome: String
- complexidade: int
- obrigatoriedade: boolean
- recursos: List<RecursoEducacional>
---
+ Modulo(nome:String)
+ getNome(): String
+ getComplexidade(): int
+ adicionaRecurso(rec: RecursoEducacional): void
+ move(rec: RecursoEducacional, novaPosicao: int): void
+ getObrigatoriedade(): boolean
+ setObrigatoriedade(flag: boolean): void
+ ordemRecurso(rec: RecursoEducacional): int
+ equals(o:Object): boolean
+ hashCode(): int
+ toString(): String
---"
25,"Facade
association EEEIController
---
- eeeic: EEEIController
---
+ Facade()
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ cadastraModulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

EEEIController
association RecursoEducacionalRepository
association UsuarioRepository
association ModuloRepository
---
- rer: RecursoEducacionalRepository
- ur: UsuarioRepository
- mr: ModuloRepository
---
+ EEEIController()
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ cadastraModulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
- geraId(): Integer
---

RecursoEducacionalRepository
composes RecursoEducacional<<Interface>>
---
- recursosEducacionais: HashMap<Integer, RecursoEducacional>
---
+ RecursoEducacionalRepository()
+ cadastraVideo(url: String, duracao: int, id: int): int
+ cadastraTexto(texto: String, id: int): int
+ cadastraPergunta(perguntas: String[], id: int): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ exibe(ids: ArrayList<Integer>): String
+ idEstaCadastrado(id: int): boolean
---

RecursoEducacional<<Interface>>
---
---
+ getComplexidade(): int
---

Video
implements RecursoEducacional<<Interface>>
---
- url: String
- duracao: int
---
+ Video(url: String, duracao: int)
+ getComplexidade(): int
+ toString(): String
---

Texto
implements RecursoEducacional<<Interface>>
---
- texto: String
---
+ Texto(texto: String)
+ getComplexidade(): int
+ toString(): String
---

Pergunta
implements RecursoEducacional<<Interface>>
---
- perguntas: String[]
- id: int
---
+ Pergunta(perguntas: String[])
+ getComplexidade(): int
+ getId(): int
+ toString(): String
---

UsuarioRepository
composes Usuario
---
- usuarios: HashMap<Integer, Usuario>
---
+ UsuarioRepository()
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ listaAcessos(email: String): String
---

Usuario
---
- email: String
- url: String
- nome: String
- matricula: String
- acessos: ArrayList<String>
---
+ Usuario(email: String, url: String, nome: String, matricula: String)
+ registraAcesso(idModulo: int, idRecurso: int): void
+ getAcessos(): String
+ toString(): String
---

ModuloRepository
composes Modulo
---
- modulos: HashMap<Integer, Modulo>
---
+ cadastraModulo(nome: String, idModulo: int): int
+ adicionaRecurso(idModulo: int, idRecurso: int, complexidadeRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ idEstaCadastrado(idModulo: int): boolean
+ getRecursos(idModulo: int): ArrayList<Integer>
---

Modulo
composes Permicao
---
- nome: String
- recursosEducacionais: ArrayList<Integer>
- permicoesDeAcesso: HashMap<Integer, Permicao>
- complexidades: HashSet<Integer>
- obrigatorio: boolean
---
+ Modulo(nome: String)
+ adicionaRecurso(idRecurso: int, complexidadeRecurso: int): int
+ pegaComplexidadeModulo(): int
+ move(idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(obrigatorio: boolean): void
+ registraAcesso(idRecurso: int, email: String): void
+ ehAcessivel(idRecurso: int, email: String): boolean
+ getRecursos(): ArrayList<Integer>
+ toString(): String
---

Permicao
---
- usuarios: HashSet<String>
---
+ Permicao()
+ adicionaUsuario(email: String): void
+ usuarioTemAcesso(email: String): boolean
---"
26,"Usuario
---
- email: str
- url: str
- nome: str
- matricula: str
- acessos: List<str>
---
+ Usuario(email: str, url: str, nome: str, matricula: str)
+ exibeUsuario(email: str): str
+ equals(o: Object): bool
+ registrarAcesso(acesso: str): void
+ listarAcessos(): str
---

UsuarioRepositorio
composes Usuario
---
- usuarios: List<Usuario>
---
+ cadastraUsuario(email: str, url: str, nome: str, matricula: str): void
+ exibeUsuario(email: str): str
+ pesquisaUsuario(email: str): str
+ registrarAcesso(email: str, acesso: str): void
+ listarAcessos(email: str): str
---

 

Recursos
---
- complexidade: int
---
+ pegaComplexidade(): int
+ toString(): str
+ hashCode(): int
---

Video
extends Recursos
---
- url: str
- duracao: int
---
+ Video(url: str, duracao: int)
+ toString(): str
+ equals(o: Object): bool
---

Texto
extends Recursos
---
- texto: str
---
+ Texto(texto: str)
+ toString(): str
+ equals(o: Object): bool
---

Teste
extends Recursos
---
- perguntas: str[]
---
+ Pergunta(perguntas: String[])
+ toString(): str
+ equals(o: Object): bool
---

RecursosRepositorio
composes Recursos
---
- recursos: List<recursos>
---
+ cadastraVideo(url: str, duracao: int): int
+ cadastraPergunta(perguntas: String[]): int
+ cadastraTexto(texto: str): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): str
+ pesquisaRecursos(id: int): Recursos
---

Modulo
composes Recursos
---
- recursos: List<recursos>
- complexidade: int
- obrigatorio: bool
---
+ Modulo(nome: str)
+ adicionaRecurso(r: Recurso): void
+ pegaComplexidadeModulo(): int
+ toString(): str
+ move(idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(o: bool): void
---

ModuloRepositorio
composes Modulo
---
- modulos: List<Modulos>
---
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, r: Recurso): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): str
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, o: boolean): void
+ pesquisaModulo(id: int): Modulo
---

 

Interacao
association RecursosRepositorio
association UsuarioRepositorio
association ModuloRepositorio
---
- recursos: RecursosRepositorio
- usuarios: UsuarioRepositorio
- modulos: ModuloRepositorio
---
+ cadastraUsuario(email: str, url: str, nome: str, matricula: str): void
+ exibeUsuario(email: str): str
+ cadastraVideo(url: str, duracao: int): int
+ cadastraPergunta(perguntas: String[]): int
+ cadastraTexto(texto: str): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): str
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, r: Recurso): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): str
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, o: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ listaAcessos(email: String): String
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
---"
27,"Main
---
---
---

Facade
association Main
---
- cc: ControllerCentral
---
+ Facade()
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[ ]): int
+ pegaComplexidade(id: int): int
+ exibeRecursoEducacional(id: int): String
+ cadastraUsuario(email: String, urlFoto: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ exibeModulo(idModulo: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

ControllerCentral
association Facade
---
- controllerRecursos: ControllerRecursosEducacionais
- controllerUsuarios: ControllerUsuarios
- controllerModulos: ControllerModulos
---
+ Facade()
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[ ]): int
+ pegaComplexidade(id: int): int
+ exibeRecursoEducacional(id: int): String
+ cadastraUsuario(email: String, urlFoto: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ exibeModulo(idModulo: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

ControllerModulos
composes Modulo
association ControllerCentral
---
- modulos: Map<Integer, Modulo>
- idModulo: int
---
+ ControllerModulos()
+ cadastraModulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ exibeModulo(idModulo: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ getModulo(idModulo: int): Modulo
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
- gerarIdModulo(): int
---

Modulo
---
- nome: String
- complexidade: int
- obrigatorio: boolean
- recursos: List<RecursosEducacionais <Interface>>
- acessos: Map<String, List<RecursosEducacionais<Interface>>>
---
+ Modulo(nome: String)
+ adicionaRecurso(recurso: RecursosEducacionais<Interface>): int
- recursoJaExiste(recurso: RecursosEducacionais<Interface>): boolean
+ move(idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(obrigatorio: boolean): void
+ listarRecursosDoModulo(): String
+ registraAcesso(idRecurso: int, email: String): void
+ ehAcessivel(idRecurso: int, email: String): boolean
+ getAcessos(email: String): List<RecursosEducacionais<Interface>>
+ toString(): String
+ equals(obj: Object): boolean
+ hashCode(): int
---

ControllerUsuarios
association ControllerCentral
composes Usuario
---
- usuarios: Map<String, Usuario>
---
+ cadastraUsuario(email: String, urlFoto: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ getUsuario(email: String): Usuario
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ listaAcessos(email: String): String
---

Usuario
---
- email: String
- urlFoto: String
- nome: String
- matricula: String
- acessos: Map<Integer, List<Integer>>
---
+ Usuario(email: String, urlFoto: String, nome: String, matricula: String)
+ registraAcesso(idModulo: int, idRecurso: int): void
+ getAcessos(idModulo: int): List<Integer>
+ listaAcessos(): String
+ toString(): String
+ equals(Object: obj): boolean
+ hashCode(): int
---

ControllerRecursosEducacionais
association ControllerCentral
---
- recursosEducacionais: Map<Integer, RecursosEducacionais <Interface>>
- idRecurso: int
---
+ ControllerRecursosEducacionais()
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[ ]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ getRecurso(id: int): RecursosEducacionais<Interface>
- gerarIdRecurso(): int
---

RecursosEducacionais <Interface>
association ControllerRecursosEducacionais
---
---
+ calculaComplexidade(): void
+ pegaComplexidade(): int
---

Video
implements RecursosEducacionais <Interface>
---
- url: String
- duracao: int
- complexidade: int
---
+ Video (url: String, duracao: int)
+ calculaComplexidade(): void
+ pegaComplexidade(): int
+ toString(): String
+ equals(Object: obj): boolean
+ hashCode(): int
---

Texto
implements RecursosEducacionais <Interface>
---
- texto: String
- complexidade: int
---
+ Texto(texto: String)
+ calculaComplexidade(): void
+ pegaComplexidade(): int
+ toString(): String
+ equals(Object: obj): boolean
+ hashCode(): int
---

Teste
implements RecursosEducacionais <Interface>
---
- perguntas: String[ ]
- complexidade: int
---
+ Teste(perguntas: String[ ])
+ calculaComplexidade(): void
+ pegaComplexidade(): int
+ toString(): String
+ equals(Object: obj): boolean
+ hashCode(): int
---"
28,"MainEEEI
association ControllerEEEI
---
---
---
ControllerEEEI
---
- modulosCadastrados: Hashmap<String,Modulo>
- midiasCadastradas: Hashmap<int,Midia>
- usuariosCadastrados: Hashmap<String, Aluno>
---
+ ControllerEEEI()
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ pegaComplexidade(id: int): int
+ exibe(id:int): String
+ exibeUsuario(email: String): String
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String

---

Usuario
composes ControllerEEEI
---
- email: String
- url: String
- nome: String
- matricula: String
- acessos: List<Midia>
---
+ Usuario(email: String,url: String,nome: String,matricula: String)
+ toString(): String
+ hashCode(): int
+ equals(o: Object): boolean
---

Midia//Equivalente a recurso
implements MidiaInterface
implements Comparator <Midia>
composes ControllerIEEE
---
- id: int
- complexidade: int
---
+ PerguntaGeral(id: int)
+ setResposta(respostaTutor: String): void
+ getComplexidade():int
+ toString(): String//Complexidade
+ hashCode(): int
+ equals(Object: o) : boolean
---
Texto
extends Midia <Abstract>
---
- texto: String
---
+ Texto(texto: String)
+ toString(): String
---

Video
extends Midia <Abstract>
---
- url: String
- duracao: int
---
+ Video(url: String, duracao: int)
+ toString(): String
---
Pergunta
extends Midia <Abstract>
---
- perguntas: String[]
---
+ Pergunta(perguntas: String[])
+ toString(): String
---

Modulo
---
- nome: String
- id: int
- complexidade: int
- acessibilidade: boolean
- obrigatoriedadeOrdem: boolean
- recursosModulo: Treemap <int,Midia>
---
+ Modulo(nome: String)
+ calculaComplexidadeModulo():int
+ toString(): String
+ hashCode(): int
+ equals(o: Object): boolean
---
MidiaInterface <Interface>
---
---
+ calculaComplexidade(): int
---"
29,"EEEIFacade
composes EEEIControlador
---
- eeei: EEEIControlador
---
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

EEEIControlador
composes UsuarioRepositorio
composes RecursoRepositorio
composes ModuloRepositorio
composes AcessoRepositorio
---
- usuarios: UsuarioRepositorio
- recursos: RecursoRepositorio
- modulos: ModuloRepositorio
- acessos: AcessoRepositorio
---
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

AcessoRepositorio
composes Acesso
---
- acessos: HashMap<String, List<Acesso>>
---
+ AcessoRepositorio()
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(modulo: Modulo, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

Acesso
---
- emailUsuario: String
- idModulo: int
- idRecurso: int
---
+ Acesso(idModulo: int, idRecurso: int, email: String)
+ getEmailUsuario(): String
+ getIdModulo(): int
+ getIdRecurso(): int
+ equals(other: Acesso): boolean
+ toString(): String
---

ModuloRepositorio
composes Modulo
---
- modulos: HashMap<Integer, Modulo>
---
+ ModuloRepositorio()
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ getModulo(id: int): Modulo
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
---

Modulo
composes Recurso
---
- id: int
- nome: String
- complexidade: int
- obrigatoriedadeOrdem: boolean
- recursos: List<Recurso>
---
+ Modulo(nome: String)
+ getId(): int
+ getNome(): String
+ getComplexidade(): int
+ adicionaRecurso(recurso: Recurso): void
+ contemRecurso(idRecurso: int): boolean
+ getRecursosIdAnteriores(id: int): List<int>
+ setObrigatoriedadeOrdem(obrigatorio: boolean): void
+ getObrigatoriedadeOrdem(): boolean
+ move(idRecurso: int, novaPosicao: int): void
+ toString(): String
---

UsuarioRepositorio
composes Usuario
---
- usuarios: HashMap<String, Usuario>
---
+ UsuarioRepositorio()
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ getUsuario(email: String): Usuario
+ exibeUsuario(email: String): String
---

Usuario
---
- email: String
- photoUrl: String
- nome: String
- matricula: String
---
+ Usuario(email: String, photoUrl: String, nome: String, matricula: String)
+ getEmail(): String
+ getPhotoUrl(): String
+ getNome(): String
+ getMatricula(): String
---

RecursoRepositorio
composes Recurso
---
- recursos: HashMap<Integer, Recurso>
---
+ RecursoRepositorio()
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ getRecurso(id: int): Recurso
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
---

Recurso
---
- id: int
- complexidade: int
---
+ getId(): int
+ getComplexidade(): int
---

Video
implements Recurso
---
- url: String
- duracao: int
---
+ Video(url: String, duracao: int)
+ getUrl(): String
+ getDuracao(): int
+ toString(): String
---

Texto
implements Recurso
---
- texto: String
---
+ Texto(texto: String)
+ getTexto(): String
+ toString(): String
---

Teste
implements Recurso
---
- perguntas: String[]
---
+ Teste(perguntas: String[])
+ getPerguntas(): String[]
+ toString(): String
---

 

 "
30,"Video
extends Recurso <Abstract>
---
- url: str
- duracao: int
---
+ Video(url: str, duracao: int)
+ toString(): str
+ hashCode(): int
+ equals(o: Object): boolean
---

Texto
extends Recurso <Abstract>
---
- texto: str
---
+ Texto(texto: str)
+ toString(): str
+ hashCode(): int
+ equals(o: Object): boolean
---

Teste
extends Recurso <Abstract>
---
- perguntas: str[]
---
+ Teste(perguntas: str[])
+ toString(): str
+ hashCode(): int
+ equals(o: Object): boolean
---

Recurso <Abstract>
---
- isAcessivel: boolean
- complexidade: int
---
+ getComplexidade(): int
+ setIsAcessivel(acessivel: boolean): void
+ getIsAcessivel(): boolean
---

ControllerRecursos
composes Recurso <Abstract>
---
- recursos: Map<int, Recurso>
- modulos: Map<int, Modulo>
---
+ ControllerRecurso()
+ cadastraVideo(url: str, duracao: int): int
+ cadastraTexto(texto: str): int
+ cadastraPergunta(perguntas: str[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): str
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ registraAcesso(idRecurso: int, email: String): void
+ defineObrigatoriedade(idModulo: int, obrigatoriedade: boolean): void
---

Usuario
association Recurso <Abstract>
---
- email: str
- url: str
- nome: str
- matricula: str
- recursos: List<Recursos>
---
+ Usuario(email: str, url: str, nome: str, matricula: str)
+ registraAcesso(recurso: Recurso): void
+ toString(): str
+ hashCode(): int
+ equals(o: Object): boolean
---

Modulo
association ControllerRecursos
---
- recursos: List<Recurso>
- complexidade: int
- nome: str
- obrigatoriedade: boolean
---
+ Modulo(nome: str)
+ adicionaRecurso(recurso: Recurso): int
+ isRecursoRepetido(recurso: Recurso): boolean
+ alteraOrdemDoRecurso(recurso: Recurso, novaPosicao: int): void
+ defineObrigatoriedade(obrigatorio: boolean): void
+ setComplexidade(): void
+ getComplexidade(): int
+ toString(): str
+ hashCode(): int
+ equals(o: Object): boolean
---

ControllerUsuario
composes Usuario
---
- usuarios: Map<str, Usuario>
---
+ ControllerUsuario()
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ getUsuario(email: str): Usuario
+ registraAcesso(recurso: Recurso): void
+ ehAcessivel(modulo: Modulo): boolean
+ listaAcessos(): String
---

ControllerGeral
composes ControllerUsuario
composes ControllerRecursos
---
- controllerUsuario: ControllerUsuario
- controllerRecursos: ControllerRecursos
---
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

Facade
composes ControllerGeral
---
---
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---"
31,"ControllerCentral
association ModuloController
association RecursosEducacionaisController
association UsuarioController
---
- mod: ModuloController
- rec: RecursosEducacionaisController
- usu: UsuarioController
---
+ ControllerCentral()
+ cadastraModulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(idModulo: int): int
+ exibeModulo(idModulo: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ listarAcessos(email: String, idModulo: int): String
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ achaRecurso(id: int): Object
+ cadastraUsuario(email: Str, url: Str, nome: Str, matricula: Str): void
+ exibeUsuario(email: String): String
---

Facade
association ControllerCentral
---
- cc: ControllerCentral
---
+ Facade()
+ cadastraModulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(idModulo: int): int
+ exibeModulo(idModulo: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ listarAcessos(email: String, idModulo: int): String
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(idRecurso: int): String
+ achaRecurso(id: int): Object
+ cadastraUsuario(email: Str, url: Str, nome: Str, matricula: Str): void
+ exibeUsuario(email: String): String
---

ModuloController
composes Modulo
---
- modulos: LinkedHashMap<int, Modulo>
---
+ ModuloController()
+ cadastraModulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(idModulo: int): int
+ exibeModulo(idModulo: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ listarAcessos(email: String, idModulo: int): String
---

RecursosEducacionaisController
composes RecursosEducacionais <interface>
---
- recursosEducacionais: LinkedHashMap<int, RecursosEducacionais <interface>>
---
+ RecursosEducacionaisController()
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(idRecurso: int): String
+ achaRecurso(id: int): Object
---

UsuarioController
composes Usuario
---
- usuarios: HashMap<String, Usuario>
---
+ UsuarioController()
+ cadastraUsuario(email: Str, url: Str, nome: Str, matricula: Str): void
+ exibeUsuario(email: String): String
---

Modulo
association RecursosEducacionais <interface>
---
- complexidade: int
- id: int
- nome: String
- recursos: LinkedHashMap<int, RecursosEducacionais <interface>>
- obrigatorio: boolean
- acessos: HashMap<String, RecursosEducacionais <interface>[]>
---
+ Modulo(nome: String)
+ adicionaRecurso(rec: RecursosEducacionais <interface>): int
+ toString(): String
+ defineObrigatoriedade(): void
+ registraAcesso(idRecurso: int, email: String): vod
+ ehAcessivel(idRecurso: int, email: String): boolean
+ listarAcessos(email: String): String
+ equals(o:Object): boolean
+ hashCode(): int
---

RecursosEducacionais <interface>
---
---
+ pegaComplexidade(): int
+ exibe(): String
---

Teste
implements RecursosEducacionais <interface>
---
- perguntas: String[]
- complexidade: int
- id: int
---
+ Teste(perguntas: String[])
+ pegaComplexidade(): int
+ exibe(): String
+ calculaComplexidade(): int
+ toString(): String
+ equals(o: Object): boolean
+ hashCode(): int
---

Texto
implements RecursosEducacionais <interface>
---
- texto: String
- complexidade: int
- id: int
---
+ Texto(texto: String)
+ pegaComplexidade(): int
+ exibe(): String
+ calculaComplexidade(): int
+ toString(): String
+ equals(o: Object): boolean
+ hashCode(): int
---

Video
implements RecursosEducacionais <interface>
---
- url: String
- duracao: int
- complexidade: int
- id: int
---
+ Video(url: String, duracao: int)
+ pegaComplexidade(): int
+ exibe(): String
+ calculaComplexidade(): int
+ toString(): String
+ equals(o: Object): boolean
+ hashCode(): int
---

Usuario
---
- email: Str
- url: Str
- nome: Str
- matricula: Str
---
+ Usuario(email: Str, url: Str, nome: Str, matricula: Str)
+ toString(): String
+ equals(o: Object): boolean
+ hashCode(): int
---"
32,"Facade
association ControllerGeral
---
---
---

ControllerGeral
composes ControllerRecursos
composes UsuarioRepository
composes ModuloRepository
---
- UsuarioModulo: Map<Usuario, ModuloRepository>
---
+ ControllerGeral()

+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPerguntas(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibeRecurso(id: int): String

+ cadastraUsuario(email: String, urlFoto: String, nome: String, matricula: String): void
+ exibeUsuario(id: int): void

+ cadastraModulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void

+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcesso(email: String): String
---

ControllerRecursos
composes RecursoRepository
---
- recursos: RecursoRepository
---
+ ControllerRecursos()
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPerguntas(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String

---

ModuloRepository
composes Modulo
---
- modulosCadastrados: Map<int, Modulo>
---
+ ModuloRepository()
+ cadastraModulo(nome: String): int
+ adicionaRecursos(idModulo: int, idRecurso:int): String
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ getModulo(id: int): Modulo
---

Modulo
composes RecursoRepository
---
- nome: String
- recurso: ArrayList<Recurso>
- obrigatorio: boolean
---
+ Modulo()
+ adicionaRecurso(recurso: Recurso): void
+ moveRecurso(idRecurso: int, novaPosicao: int): void
+ toString(): String
+ equals(obj: Object): boolean
+ hashCode(): int
+ setObrigatoriedade(obrigatorio: boolean): void

---

UsuarioRepository
composes Usuario
---
- usuariosCadastrados: Map<String, Usuario>
---
+ UsuarioRepository()
+ cadastraUsuario(email: String, urlFoto: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ getUsuario(email: String): Usuario
---

Usuario
---
- email: String
- urlFoto: String
- nome: String
- matricula: String
---
+ Usuario(email: String, urlFoto: String, nome: String, matricula: String)
+ toString(): String
+ equals(obj: Object): boolean
+ hashCode(): int
---

RecursoRepository
composes Recurso <Interface>
---
- recursos: Map<int, Recurso>
---
+ RecursoRepository()

+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPerguntas(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String

---

Recurso <Interface>
---
---
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
---

Video
implements Recurso <Interface>
---
- url: String
- duracao: int
---
+ Video(url: String, duracao: int)
+ complexidade(): int
+ toString(): String
+ equals(obj: Object): boolean
+ hashCode(): int
---

Texto
implements Recurso <Interface>
---
- texto: String
---
+ Texto(texto: String)
+ complexidade(): int
+ toString(): String
+ equals(obj: Object): boolean
+ hashCode(): int

---

Teste
implements Recurso <Interface>
---
- perguntas: String[]
---
+ Teste(perguntas: String[])
+ complexidade(): int
+ toString(): String
+ equals(obj: Object): boolean
+ hashCode(): int
---

 "
33,"Main
composes Facade
---
---
---

Facade
association UsuarioController
association RecursosEducacionaisController
association ModuloController
---
---
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

RecursosEducacionaisController
composes RecursosEducacionais<Interface>
---
- recursosEducacionais: HashMap<int, RecursosEducacionais<Interface>>
- codigoAleatorio: int
---
+ RecursosEducacionaisController()
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ atualizarCodigoAleatorio(): void
---

RecursosEducacionais<Interface>
---
---
+ pegaComplexidade(): int
---

RecursoEducacional
implements RecursosEducacionais<Interface>
---
- codigo: int
- usuariosAcessaram: HashMap<email, Usuario>
- complexidade: int

---
+ RecursoEducacional(codigo: int, complexidade: int)
+ getComplexidade(): int
+ calcularComplexidade(): int
+ hashCode(): int
+ equals(O: Object): boolean
+ toString(): String
---

Texto
extends RecursoEducacional
---
- Texto: String
---
+ Texto()
+ toString(): String
---

Teste
extends RecursoEducacional
---
- Perguntas: String[]

---
+ Teste(cnpj: String, nome: String, codigo: int)
+ toString(): String
---

Video
extends RecursoEducacional
---
- url: String
- duracaoVideo: int
---
+ Video(url: String, duracaoVideo: int)
+ toString(): String
---

UsuarioController
composes Usuario
---
- usuarios: HashMap<String, Usuario>
---
+ UsuarioController()
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
---

Usuario
---
- email: String
- url: String
- nome: String
- matricula: String
---
+ Usuario(email: String, url: String, nome: String, matricula: String)
+ hashCode(): int
+ equals(Object: o): String
+ toString(): String
---

ModuloController
---
- modulos: HashMap<int, Modulo>
- codigoAleatorio: int
---
+ cadastraModulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
- atualizarCodigoAleatorio(): void
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

Modulo
---
- complexidade: int
- nome: String
- codigo: int
- obrigatoriedade: boolean
- recursosEducacionais: LinkedHashSet<int, RecursosEducacionais<Interface>>
---
+ Modulo(nome: String, codigo: int)
+ move(idRecurso: int, novaPosicao: int): void
+ setObrigatoriedade(obrigatoriedade: String): void
+ registraAcesso(idRecurso: int, email: String): void

+ listaAcessos(email: String): String

-  calcularComplexidade(): int

+ setComplexidade(): void
+ hashCode(): int
+ equals(o: Object): boolean
+ toString(): String
---

 "
34,"Principal
association ControllerRecEducacional
association ControllerModulo
association ControllerUser
---
- controllerRecursos: ControllerRecEducacional
- controllerUser: ControllerUser
---
+ Principal()
+ registerVideo(urlArquivo: String, tempo: int): int
+ registerTexto(texto: String): int
+ registerPergunta(perguntas: String[]): int
+ registerUser(emailUser: String, urlArquivo: String, name: String, matriculaUser: String): void
+ mostraUser(emailUser: String): String
+ mostra(id: int): String
+ obterComplexidade(id: int): int
+ registerMódulo(name: String): int
+ registerAcesso(idModulo: int, recursoId: int, emailUser: String): void
+ listaDeAcessos(emailUser: String): String
+ addRecurso(idModulo: int, recursoId: int): int
+ verificaAcessivel(idModulo: int, recursoId: int, emailUser: String): boolean
+ obterComplexidadeModulo(id: int): int
+ mostraModulo(id: int): String
+ altera(idModulo: int, recursoId: int, newPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
---

//----- User -----

User
---
- emailUser: String
- urlArquivo: String
- name: String
- matriculaUser: String
- acessosRegister: HashMap<int, ArrayList<int>>
---
+ User(emailUser: String, urlArquivo: String, name: String, matriculaUser: String)
+ obterEmailUser(): String
+ listaDeAcessos(): String
+ registerAcesso(idModulo: int, recursoId: int): void
+ verificaAcessivel(idModulo: int, recursoId: int): boolean
+ toString(): String
+ equals(o: Object): boolean
+ hashCode(): int
---

ControllerUser
composes User
---
- usuarios: HashMap<String, User>
---
+ ControllerUser()
+ verificaAcessivel(idModulo: int, recursoId: int, emailUser: String): boolean
+ listaDeAcessos(emailUser: String): String
+ registerUser(emailUser: String, urlArquivo: String, name: String, matriculaUser: String): void
+ mostraUser(emailUser: String): String
+ buscaUser(emailUser: String): User
+ registerAcesso(idModulo: int, recursoId: int, emailUser: String): void
---

//----- Recursos Educacional -----

RecursoEducacional<Interface>
---
---
+ complexidadeNum(): int
+ obterComplexidade(): int
+ toString(): String
+ obterId(): int
+ hashCode(): int
---

ControllerRecEducacional
composes RecursoEducacional<Interface>
---
- recursos: HashMap<int, RecursoEducacional>
---
+ ControllerRecEducacional()
+ registerVideo(urlArquivo: String, tempo: int): int
+ registerTexto(texto: String): int
+ registerPergunta(perguntas: String[]): int
+ obterComplexidade(id: int): int
+ obterRecurso(recursoId: int): RecursoEducacional
+ mostra(id: int): String
---

Video
implements RecursoEducacional<Interface>
---
- Id: int
- urlArquivo: String
- tempo: int
- complexidade: int
---
+ Video(urlArquivo: String, tempo: int)
+ complexidadeNum(): int
+ obterId(): int
+ obterComplexidade(): int
+ toString(): String
+ equals(o: Object): boolean
+ hashCode(): int
---

Texto
implements RecursoEducacional<Interface>
---
- texto: String
- Id: int
- complexidade: int
---
+ Texto(texto: String)
+ complexidadeNum(): int
+ obterComplexidade(): int
+ obterID(): int
+ toString(): String
+ equals(o: Object): boolean
+ hashCode(): int
---

Teste
implements RecursoEducacional<Interface>
---
- perguntas: String[]
- ID: int
- complexidade: int
---
+ Teste(perguntas: String[])
+ complexidadeNum(): int
+ obterComplexidade(): int
+ obterID(): int
+ toString(): String
+ equals(o: Object): boolean
+ hashCode(): int
---

//----- Modulo -----

Modulo
aggregates RecursoEducacional<Interface>
---
- recursos: ArratList<RecursoEducacional>
- name: String
- Id: int
- complexidade: int
- obrigatorio: boolean
---
+ Modulo(name: String)
+ complexidadeNum(): int
+ obterComplexidade(): int
+ addRecurso(recurso: Recurso): void
+ obterObrigatoriedade(): boolean
+ setObrigatoriedade(novoValor: boolean): void
+ obterId(): int
+ altera(recurso: RecursoEducacional, newPosicao: int): void
+ toString(): String
+ equals(o: Object): boolean
+ hashCode(): int
---

ControllerModulo
composes Modulo
---
- modulos: HashMap<int, Modulo>
---
+ ControllerModulo()
+ registerModulo(name: String): int
+ obterComplexidadeModulo(id: int): int
+ addRecurso(idModulo: int, recurso: RecursoEducacional): int
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ mostraModulo(id: int): String
+ altera(idModulo: int, recurso: RecursoEducacional, newPosicao: int): void
---"
35,"Facade
composes EducacionalController
composes UsuarioController
---
- educacionalController: EducacionalController
- usuarioController: UsuarioController
---
+ Facade()
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraTeste(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibeRecurso(id: int): String

+ cadastraModulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void

+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

EducacionalController
composes RecursoEducacional <Abstract>
composes Modulo
---
- recursos: HashMap<int, RecursoEducacional>
- modulos: HashMap<int, Modulo>
---
+ EducacionalController()
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraTeste(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibeRecurso(id: int): String

+ cadastraModulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ getIdRecursosEducacionaisModulo(idModulo: int): ArrayList<int>
+ getObrigatoriedadeModulo(idModulo: int): boolean
---

RecursoEducacional <Abstract>
---
# complexidade: int
- id: int
---
+ RecursoEducacional(id: int)
+ getComplexidade(): int
+ getId(): int
+ toString(): String
---

Video
extends RecursoEducacional <Abstract>
---
- url: String
- duracao: int
---
+ Video(url: String, duracao: int, id: int)
+ toString(): String
+ hashCode(): int
+ equals(o: Object): boolean
---

Texto
extends RecursoEducacional <Abstract>
---
- texto: String
---
+ Texto(texto: String, id: int)
+ toString(): String
+ hashCode(): int
+ equals(o: Object): boolean
---

Teste
extends RecursoEducacional <Abstract>
---
- perguntas: String[]
---
+ Teste(perguntas: String[], id: int)
+ toString(): String
+ hashCode(): int
+ equals(o: Object): boolean
---

Modulo
---
- complexidade: int
- id: int
- nome: String
- recursosEducacionais: ArrayList<RecursoEducacional>
- obrigatoriedade: boolean
---
+ Modulo(nome: String, id: int)
+ adicionaRecurso(recurso: RecursoEducacional): int
- verificaRecurso(recurso: RecursoEducacional): boolean
- calculaComplexidade(): void
+ getComplexidade(): int
+ move(recurso: RecursoEducacional, novaPosicao: int): void
+ setObrigatoriedade(obrigatorio: boolean): void
+ getIdRecursosEducacionais(): ArrayList<int>
+ getObrigatoriedade(): boolean
+ toString(): String
+ hashCode(): int
+ equals(o: Object): boolean
---

UsuarioController
composes Usuario
---
- usuarios: HashMap<String, Usuario>
- educacionalController: EducacionalController
---
+ UsuarioController(educacionalController: EducacionalController)
+ cadastraUsuario(email: String, foto: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

Usuario
---
- email: String
- foto: String
- nome: String
- matricula: String
- acessos: HashMap<int, HashSet<int>>
---
+ Usuario(email: String, foto: String, nome: String, matricula: String)
+ registraAcesso(idModulo: int, idRecurso: int): void
+ listaAcessos(): String
+ getAcessosModulo(idModulo: int): HashSet<int>
+ toString(): String
+ hashCode(): int
+ equals(o: Object): boolean
---"
36,"Facade
composes ConteudoController
composes UsuarioRepository
---
---
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

ConteudoController
composes RecursosRepository
composes ModulosRepository
---
- recursos: RecursosRepository
- modulos: ModulosRepository
---
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
---

RecursosRepository
composes RecursoEducacional <Interface>
---
- recursos: Map<Integer, RecursoEducacional <Interface>>
---
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
---

ModulosRepository
composes Modulo
---
- modulos: Map<Integer, Modulo>
---
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(obrigatorio: boolean): void
---

UsuarioRepository
composes Usuario
---
- usuarios: Map<String, Usuario>
---
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

RecursoEducacional <Interface>
---
---
+ pegaComplexidade(): int
---

Video
implements RecursoEducacional <Interface>
---
- url: String
- duracao: int
---
+ Video(url: String, duracao: int)
+ toString(): String
+ hashCode(): int
+ equals(o: Object): boolean
---

Texto
implements RecursoEducacional <Interface>
---
- texto: String
---
+ Texto(texto: String)
+ toString(): String
+ hashCode(): int
+ equals(o: Object): boolean
---

Teste
implements RecursoEducacional <Interface>
---
- perguntas: String[]
---
+ Teste(perguntas: String[])
+ toString(): String
+ hashCode(): int
+ equals(o: Object): boolean
---

Modulo
---
- complexidade: int
- recursos: List<RecursoEducacional <Interface>>
- ordemObrigatoria: boolean
---
+ Modulo(nome: String)
+ adicionaRecurso(idRecurso: int): void
+ pegaComplexidade(): int
+ move(idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(obrigatorio: boolean): void
+ toString(): String
+ hashCode(): int
+ equals(o: Object): boolean
---

Usuario
composes Acesso
---
- email: String
- url: String
- matricula: String
- acessos: List<Acesso>
---
+ Usuario(email: String, url: String, matricula: String)
+ registraAcesso(idModulo: int, idRecurso: int): void
+ ehAcessivel(idModulo: int, idRecurso: int): boolean
+ listaAcessos(): String
+ toString(): String
+ hashCode(): int
+ equals(o: Object): boolean
---

Acesso
---
- idModulo: int
- idRecurso: int
- data: String
---
+ Acesso(idModulo: int, idRecurso: int)
+ toString(): String
---"
37,"CentralController
association RecursosController
association UsuarioController
association ModuloController
---
- usuarios: UsuarioRepositorio
- recursos: RecursosRepositorio
- modulos: ModuloRepositorio
---
+ adicionaVideo(url: str, duracao: int): int
+ adicionaPergunta(perguntas: String[]): int
+ adicionaTexto(texto: str): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): str
+ adicionaModulo(nome: String): int
+ cadastraRecurso(idModulo: int, r: Recurso): int
+ pegaComplexidadeDoModulo(id: int): int
+ exibeModulo(id: int): str
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineSeEhObrigatorio(idModulo: int, o: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ mostrarAcessos(email: String): String
---

Usuario
---
- acessados: List<str>
- email: str
- url: str
- nome: str
- matricula: str
---
+ Usuario(email: str, url:str, matricula:str)
+ mostraUsuario(email:str):str
+ cadastraAcesso(acesso:str): void
+ mostrarAcessos():str
---

UsuarioController
composes Usuario
---
- usuariosCadastrados: List<Usuario>
---
+ cadastrarUsuario(email: str, url: str, nome: str, matricula: str):void
+ exibirUsuario(email:str):str
+ procurarUsuario(email: str): str
+ listarTodosOsAcessos():str
+ registrarAcesso(email: str, acesso: str):void
---

Texto
extends Recursos
---
- texto: str
---
+ Texto(texto: str)
+ toString(): str
+ equals(o: Object): bool
---

Video
extends Recursos
---
- duracao: int
- url: int
---
+ Video(url: str, duracao: int)
+ equals(o: Object): bool
+ toString(): str
---

Recursos
---
- complexidade: int
---
+ pegaComplexidade():int
+ toString():str
+ hashCode():int
---

RecursosController
composes Recursos
---
- recursos: List<Recursos>
---
+ adicionaVideo(url:str, duracao:int):int
+ adicionaPergunta(perguntas: String[]): int
+ adicionaTexto(texto:str):int
+ pegaComplexidade(id:int):int
+ exibe(id:int): str
+ procurarRecursos(id:int):Recursos
---

Modulo
composes Recursos
---
- complexidade: int
- ehObrigatorio: bool
- recursos: List<Recursos>
---
+ Modulo(nome: str)
+ adicionaRecurso(r: Recurso): void
+ move(idRecurso: int, novaPosicao: int): void
+ pegaComplexidadeModulo(): int
+ toString(): str
+ defineSeEhObrigatorio(o: bool): void
---

ModuloController
composes Modulo
---
- modulos: List<Modulos>
---
+ adicionaModulo(nome: String): int
+ adicionaRecurso(idModulo: int, r: Recurso): int
+ pegaComplexidadeDoModulo(id: int): int
+ exibeModulo(id: int): str
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, o: boolean): void
+ pesquisaModulo(id: int): Modulo
---"
38,"Main
---
---
---

Fachada
composes ControleRecursosEModulos
composes ControleUsuarios
association Main
---
- controladorDeRecursosEModulos: ControleRecursosEModulos
- controladorDeUsuarios: ControleUsuarios
---
+ Fachada()
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ cadastraModulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

ControleRecursosEModulos
composes InterfaceRecursoEducacional <Interface>
composes Modulo
---
+ recursosEducacionais: Map<Integer, InterfaceRecursoEducacional>
+ modulos: Map<Integer, Modulo>
+ geradorId: int
---
+ ControladorRecursosEModulos()
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ cadastraModulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

ControleUsuarios
composes Usuario
---
- usuarios: Map<String, Usuario>
---
+ ControleUsuarios()
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ hasUsuario(email: String): boolean
+ exibeUsuario(email: String): String
---

InterfaceRecursoEducacional <Interface>
---
---
+ getComplexidade(): int
---

Video
implements InterfaceRecursoEducacional <Interface>
----
- url: String
- duracao: int
----
+ Video(url: String, duracao: int)
+ getComplexidade(): int
+ toString(): String
----

Texto
implements InterfaceRecursoEducacional <Interface>
----
- texto: String
----
+ Texto(texto: String)
+ getComplexidade(): int
+ toString(): String
----

Teste
implements InterfaceRecursoEducacional <Interface>
---
- perguntas: String[]
---
+ Teste(perguntas: String[])
+ getComplexidade(): int
+ toString(): String
---

Usuario
---
- email: String
- url: String
- nome: String
- matricula: String
---
+ Usuario(email: String, url: String, nome: String, matricula: String)
+ getEmail(): String
+ toString(): String
+ equals(obj: Object): boolean
+ hashcode(): int
---

Modulo
composes RegistroDeAcesso
---
- nome: String
- obrigatoriedade: boolean
- listaDeRecursos: List<Integer>
- registrosAcessosUsuarios: Map<String, RegistroDeAcesso>
---
+ Modulo(nome: String)
+ adicionaRecurso(idRecurso: int): int
+ getListaDeRecursos(): List<Integer>
+ registraAcesso(idRecurso: int, email: String): void
+ ehAcessivel(idRecurso: int, email: String): boolean
+ getRegistroAcesso(email: String): Set<Integer>
+ hasUsuarioRegistrado(email: String): boolean
+ move(idRecurso: int, novaPosicao: int): void
+ hasRecurso(idRecurso: int): boolean
+ defineObrigatoriedade(obrigatorio: boolean): void
+ getObrigatoriedade(): boolean
+ toString(): String
+ equals(obj: Object): boolean
+ hashcode(): int
---

RegistroDeAcesso
---
- conjuntoDeAcessos: Set<Integer>
---
+ RegistroDeAcesso()
+ adicionaAcesso(idRecurso: int): void
+ getConjuntoDeAcessos(): Set<Integer>
---"
39,"//Ensino Eletrônico e Eficiente de Idiomas

Main
---
---
---

Facade
association Main
---
---
+ Facade()
+ CadastroRecursosEducacionaisUsuariosController()
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ CadastroModulosRegistroDeAcessosController()
+ cadastraModulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ ordenarRecursosModulo(idModulo: int): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

CadastroRecursosEducacionaisUsuariosController
association Facade
---
- recursosEducacionais: Map<Integer, RecursoEducacional>
- usuarios: Map<Integer, Usuario>
---
+ CadastroRecursosEducacionaisUsuariosController()
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
---

CadastroModulosRegistroDeAcessosController
association Facade
---
---
+ CadastroModulosRegistroDeAcessosController()
+ cadastraModulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ ordenarRecursosModulo(idModulo: int): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

RecursoEducacional <Interface>
association CadastroRecursosEducacionaisUsuariosController
---
---
+ calculaComplexidade(): int
+ acesso(acesso: String): boolean
---

Video
association RecursoEducacional <Interface>
---
- url: str
- duracaoVideo: int
- acesso: String
---
+ Video(url: str, duracao: int)
+ calculaComplexidade(): int
+ acesso(acesso: String): boolean
+ toString(): String
---

Texto
association RecursoEducacional <Interface>
---
- acesso: String
- texto: str
---
+ Texto(texto: String)
+ calculaComplexidade(): int
+ acesso(acesso: String): boolean
+ toString(): String
---

Teste
association RecursoEducacional <Interface>
---
- acesso: String
- perguntas: str[]
---
+ Teste(perguntas: String[])
+ calculaComplexidade(): int
+ acesso(acesso: String): boolean
+ toString(): String
---

Usuario
association CadastroRecursosEducacionaisUsuariosController
---
- email: String
- url: String
- nome: String
- matricula: String
---
+ Usuario(email: String, url: String, nome: String, matricula: String)
+ toString(): String
---

Modulo
association CadastroModulosRegistroDeAcessosController
association RecursoEducacional <Interface>
---
- nome: String
- recursos: ArrayList<RecursoEducacional>
- obrigatorio: boolean
---
+ Modulo(nome: String)
+ move(recurso: Recurso, novaPosicao: int): void
+ calculaComplexidadeModulo(): int
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ ordenarRecursos(): void
---"
40,"EEEI
composes Facade
---
---
---

Facade
composes ControllerCentral
---
---
---

ControllerCentral
composes ControllerRecursosEducacionais
composes ControllerUsuario
composes Modulo
---
- cRE: ControllerRecursosEducacionais
- cP: ControllerUsuario
- modulos: Map<int, Modulo>
---
+ ControllerCentral()
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ cadastraModulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

ControllerRecursosEducacionais
composes RecursoEducacional <Abstract>
---
- recursos: Map<int, RecursoEducacional>
---
+ ControllerRecursosEducacionais()
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
---

RecursoEducacional <Abstract>
---
- id: int
---
+ RecursoEducacional(id: int)
+ hashCode(): int
---

Video
extends RecursoEducacional <Abstract>
---
- url: String
- duracao: int
- complexidade: int
---
+ Video(url: String, duracao: int)
+ pegaComplexidade(): int
+ exibe(): String
---

Texto
extends RecursoEducacional <Abstract>
---
- texto: String
- complexidade: int
---
+ Texto(texto: String)
+ pegaComplexidade(): int
+ exibe(): String
---

Teste
extends RecursoEducacional <Abstract>
---
- perguntas: String[]
- complexidade: int
---
+ Teste(perguntas: String[])
+ pegaComplexidade(): int
+ exibe(): String
---

ControllerUsuario
composes Usuario
---
- usuarios: Map <String, Usuario>
---
+ ControllerUsuario()
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
---

Usuario
---
- email: String
- url: String
- nome: String
- matricula: String
---
+ Usuario(email: String, url: String, nome: String, matricula: String)
+ exibeUsuario(): String
+ hashCode(): int
---

Modulo
---
- nome: String
- idRecursos: ArrayList<Integer>
- ordemObrigatoria: boolean
- registroAcesso: Map<int, String>
---
+ Modulo(nome: String)
+ exibeModulo(): String
- move(idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(obrigatorio: boolean): void
+ registraAcesso(idRecurso: int, email: String): void
+ ehAcessivel(idRecurso: int, email: String): boolean
+ pegaIdRecursosUsuario(email: String): ArrayList<Integer>
+ pegaIdRecursos(): ArrayList<Integer>
+ hashCode(): int
---"
41,"Facade
---
- cr: ControllerDeRecursos
- cu: ControllerDeUsuarios
- cm: ControllerDeModulos
---
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String // método que retorna toString de um recurso
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

ControllerDeRecursos
association Facade
composes RecursoEducacional <<Abstract>>
---
- RecursosEducacionais: TreeMap<int, RecursoEducacional>
---
//Entrada pode conter um inteiro separado por "","" ou "" "" dependendo do tipo de recurso
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
- geraId(): int // método privado que gera um Id único para o recurso
+ editaRecursoEducacional(id: int, opcao: String, valor: String): void
+ exibe(id: int): String
+ exibeRecursosEducacionais(): String
+ getRecurso(idRecurso: int): RecursoEducacional
---

RecursoEducacional <<Abstract>>
---
- complexidade: int
- id: int
---
# setDescricao(descricao: String): void
# getDescricao(): String
# setDuracao(duracao: String): void
# getDuracao(): int
+ setId(id: int): int
+ getId(): int
+ getComplexidade(id: int): int
+ exibe(): String
+ hashCode(): int
+ equals(o: object): boolean
+ compareTo(o: object): object
---

Video
extends RecursoEducacional <<Abstract>>
---
- id: int
- url: String
- duracao: int
- complexidade: int
---
+ Video(url: String, duracao: int)
- calculaComplexidade(): void // método que calcula internamente complexidade
+ setId(id: int): void
+ getComplexidade(): int
+ toString(): String
+ hashCode(): int
+ equals(o: object): boolean
---

Texto
extends RecursoEducacional <<Abstract>>
---
- id: int
- texto: String
- complexidade: int
---
+ Texto(texto: String)
- calculaComplexidade(): void // método que calcula internamente complexidade3
+ setId(id: int): void
+ getComplexidade(): int
+ toString(): String
+ hashCode(): int
+ equals(o: object): boolean
---

Teste
extends RecursoEducacional <<Abstract>>
---
- id: int
- perguntas: String []
- complexidade: int
---
+ Teste(perguntas: String [])
- calculaComplexidade(): void // método que calcula internamente complexidade
+ setId(id: int): void
+ getComplexidade(): int
+ toString(): String
---

ControllerDeUsuario
association Facade
association ControllerDeModulos
composes Usuario
---
- usuarios: Map<String, Usuarios>
---
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ editaUsuario(email: String, opcao: String, valor: String): void
+ exibeUsuario(email: String): String
+ getPosicaoDeRecurso(idDoRecurso: int): int
+ getUsuario(idUsuario: int): Usuario
---

Usuario
---
- email: String
- url: String
- nome: String
- matricula: String
- acesso: ArrayList<RecursoEducacional>
---
+ Usuario(email: String, url: String, nome: String, matricula: String)
+ getEmail(): String
+ verificaRecursoAcessado(idRecuso: int): boolean
+ gePosicaoDoRecurso(): int
+ getUrl(): String
+ getNome(): String
+ getMatricula(): String
+ setEmail(): String
+ setUrl(): String
+ setNome(): String
+ setMatricula(): String
+ hashCode(): int
+ equals(o: object): boolean
---

ControllerDeModulos
composes Modulo
association ControllerDeRecursos
---
- modulos: TreeMap<int, Modulo>
---
+ cadastraModulo(nome: String): int
- geraId(): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ getComplexidade(idModulo: int): int
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
- verificadorDeObrigatorio(idModulo: int): boolean
+ exibeModulo(idModulo: int): String
+ exibeModulos(): String
+ verificaAcesso(idModulo: int,usuario: Usuario, idRecursoAcessado: int): boolean
---

Modulo
composes RecursoEducacional <<Abstract>>
---
- nome: String
- recursos: LinkedList<RecursoEducacional>
- complexidade: int
- obrigatoriedade: boolean
---
+ Modulo(nome: String)
+ adicionaRecurso(recurso: RecursoEducacional):void
// forma de evitar com que um mesmo recurso seja adicionado novamente no modulo
- verificaRecursoAdicionado(recursoAdd: RecursoEducacional): boolean
- calculaComplexidade(): void
+ getComplexidade(): int
+ setObrigatoriedade(valor: boolean): void
+ getObrigatoriedade(): boolean
+ getRecruso(posicao: int): RecursoEducacional
+ move(idRecurso: int, novaPosicao: int): void
+ getPosicaoDeRecurso(): int
+ toString(): String
+ hashCode(): int
+ verificaAcesso(usuario: Usuario, idRecurso: int): boolean
+ equals(o: object): boolean
---"
42,"ControllerModulo
---
- modulos: HashMap<String, Modulo>
---
+ insereMódulo(nome: String): int
+ addRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ mostraModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ eAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listagemAcessos(email: String): String
---

ControllerUsuario
---
- usuarios: HashMap<String, Usuario>
---
+ ControllerUsuario()
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ mostraUsuario(email: String): String
+ getUsuario(id: String): String
---

ControllerRecurso
---
- recursos: HashMap<int, IRecurso>
---
+ ControllerRecurso()
+ insereVideo(url: String, duracao: int): int
+ insereTexto(texto: String): int
+ inserePergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ getRecurso(id: int): IRecurso
---

Video
implements IRecurso
---
- url: String
- duracao: int
---
+ Video(url: String, duracao: int)
+ complexidado(): int
+ calculaComplexidade(): int
+ toString(): String
---

Texto
implements IRecurso
---
- texto: String
---
+ Texto(texto: String)
+ complexidado(): int
+ calculaComplexidade(): int
+ toString(): String
---

Teste
implements IRecurso
---
- pergunta: String[]
---
+ Teste(pergunta: String[])
+ complexidado(): int
+ calculaComplexidade(): int
+ toString(): String
---

Usuario
---
- email: String
- url: String
- nome: String
- matricula: String
- recursosAcessados: ArrayList<IRecurso>
---
+ Usuario(email: String, url: String, nome: String, matricula: String)
+ insereAcesso(idRecurso: int, email: String): void
+ eAcessivel(idRecurso: int, email: String): boolean
+ listagemAcessos(recurso: IRecurso): String
+ toString(): String
---

IRecurso
---
---
+ calculaComplexidade(): int
---

Modulo
---
- recursos: ArrayList<IRecurso>
- podeAlterarOrdem: bool
---
+ Modulo()
+ calculaComplexidade(): int
+ move(idRecurso: int, novaPosicao: int): void
+ toString(): String
---"
43,"Facade
association ControllerRecursos
association ControllerUsuario
---
- controllerRecursos: ControllerRecursos
- controllerUsuario: ControllerUsuario
---
+ Facade()
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ getComplexidade(id: int): int
+ exibe(id: int): String
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ cadastraModulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ getComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

RecursoEducacional <<Abstract>>
---
# id: int
# complexidade: int
---
+ getComplexidade(id: int): int
+ exibe(id: int): String
---

RecursoDeVideo
extends RecursoEducacional <<Abstract>>
---
- url: String
- duracao: int
---
+ RecursoDeVideo(url: String, duracao: int, id: int)
+ toString(): String
+ hashCode(): int
+ equals(): boolean
---

RecursoDeTexto
extends RecursoEducacional <<Abstract>>
---
- texto: String
---
+ RecursoDeTexto(texto: String, id: int)
+ toString(): String
+ hashCode(): int
+ equals(): boolean
---

RecursoDeTeste
extends RecursoEducacional <<Abstract>>
---
- perguntas: String[]
---
+ RecursoDeTeste(id: int, perguntas: String[])
+ toString(): String
+ hashCode(): int
+ equals(): boolean
---

Usuario
association RecursoEducacional <<Abstract>>
---
- email: String
- url: String
- nome: String
- matricula: String
- recursos: List<RecursoEducacional <<Abstract>> >
---
+ Usuario(email: String, url: String, nome: String, matricula: String)
+ registraAcesso(recurso: Recurso): void
+ ehAcessivel(recurso: Recurso): boolean
+ listaAcessos(): String
+ toString(): String
+ hashCode(): int
+ equals(): boolean
---

ControllerUsuario
composes Usuario
association ControllerRecursos
---
- controllerRecursos: ControllerRecursos
- usuarios: HashMap<String, Usuario>
---
+ ControllerUsuario(controllerRecursos: ControllerRecursos)
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

ControllerRecursos
composes RecursoEducacional <<Abstract>>
---
- modulos: HashMap<int, Modulo>
- recursos: HashMap<int, RecursoEducacional <<Abstract>> >
- codigosDosRecursos: HashSet<int>
---
+ ControllerRecursos()
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ getComplexidade(id: int): int
+ exibe(id: int): String
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ cadastraModulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ getRecursos(idModulo: int, idRecurso: int): Recurso
+ hashCode(): int
+ equals(): boolean
---

Modulo
association RecursoEducacional <<Abstract>>
---
- nome: String
- complexidade: int
- recursos: List <Recurso>
- idModulo: int
- ehObrigatorio: boolean
---
+ Modulo(nome: String, idModulo: int)
+ adicionaRecurso(recurso: Recurso): int
- setComplexidade(): void
+ setEhObrigatorio(ehObrigatorio: boolean): void
+ move(idRecurso: int, novaPosicao: int): void
+ toString(): String
+ hashCode(): int
+ equals(): boolean
---"
44,"Facade
composes Controller
---
---
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ cadastraUsuario(email: String, url:  String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

Controller
composes Modulo
composes Recurso <Abstract>
composes Usuario
---
- recursos: HashMap<Integer, Recurso>
- usuarios: HashMap<String, Usuario>
- modulos: HashMap<Integer, Modulo>
---
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ cadastraUsuario(email: String, url:  String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

Recurso <Abstract>
---
- acessos: ArrayList<String>
- complexidade: int
- ID: int
---
+ getComplexidade(): int
+ getID(): int
+ registraAcesso(email: String): void
+ ehAcessivel(email: String): boolean
---

Video
implements Recurso <Abstract>
---
- url: String
- duracao: int
---
+ Video(url: String, duracao: int)
+ toString(): String
+ hashCode(): int
+ equals(o: Object): boolean
---

Texto
implements Recurso <Abstract>
---
- texto: String
---
+ Texto(texto: String)
+ toString(): String
+ hashCode(): int
+ equals(o: Object): boolean
---

Teste
implements Recurso <Abstract>
---
- perguntas: String[]
---
+ Teste(perguntas: String[])
+ toString(): String
+ hashCode(): int
+ equals(o: Object): boolean
---

Usuario
---
- email: String
- url: String
- nome: String
- matricula: String
- materiaisAcessados: ArrayList<int>
---
+ Usuario(email: String, url:  String, nome: String, matricula: String)
+ toString(): String
+ adicionaAcesso(id: int): void
+ getMateriaisAcessados(): ArrayList<int>
---

Modulo
association Recurso <Abstract>
---
- nome: String
- recursos: ArrayList<Recurso>
- complexidade: int
- id: int
- obrigatoriedade: boolean
---
+ Modulo(nome: String)
+ adicionaModulo(recurso: Recurso): void
+ toString(): String
+ getComplexidade(): int
+ hashCode(): int
+ equals(o: Object): boolean
+ getID(): int
+ defineObrigatoriedade(novaObrigatoriedade: boolean): void
+ move(idRecurso: int, novaPosicao: int): void
+ foiAcessadoPor(email: String): boolean
+ registraAcesso(idRecurso: int, email: String): void
+ ehAcessivel(idRecurso: int, email: String): boolean
---"
45,"Main
association Facade
---
---
---

Facade
composes UsuarioController
composes ModuloController
composes RecursoEducacionalController
---
- usuarioController: UsuarioController
- moduloController: ModuloController
- recursosController: RecursoEducacionalController
---
+ Facade()
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(peguntas: String[]): int
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ cadastraModulo(nome: String): int
+ adicionaRecursoModulo(idModulo: int, idRecurso: int): boolean
+ pegaComplexidadeRecurso(idRecurso: int): int
+ pegaComplexidadeModulo(idModulo: int): int
+ exibeRecurso(idRecurso: int): String
+ exibeModulo(idModulo: int): String
+ exibeUsuario(email: String): String
+ moveRecurso(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessosUsuario(email: String): String
---

RecursoEducacionalRepositorio
composes RecursoEducacional <Interface>
---
- recursosDisponiveis: HashMap<Integer, RecursoEducacional>
- idAleatorio: int
---
+ RecursoEducacionalRepositorio()
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ exibeRecurso(id: int): String
+ getRecurso(id: int): RecursoEducacional
---

RecursoEducacional <Interface>
---
---
+ getComplexidade(): int
+ hashCode(): int
+ equals(o: Object): boolean
+ toString(): String
---

RecursoEducacionalController
composes RecursoEducacionalRepositorio
---
- recursoRepositorio: RecursoEducacionalRepositorio
---
+ RecursoEducacionalController()
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ exibeRecurso(id: int): String
---

Video
implements RecursoEducacional <Interface>
---
- id: int
- url: String
- duracao: int
---
+ Video(url: String, duracao: int)
+ getComplexidade(): int
+ toString(): String
---

Texto
implements RecursoEducacional <Interface>
---
- id: int
- texto: String
---
+ Texto(texto: String)
+ getComplexidade(): int
+ toString(): String
---

Teste
implements RecursoEducacional <Interface>
---
- id: int
- perguntas: String[]
---
+ Teste(perguntas: String[])
+ getComplexidade(): int
+ toString(): String
---

UsuarioRepositorio
composes Usuario
---
- usuarios: HashMap<String, Usuario>
- idAleatorio: int
---
+ UsuarioRepositorio()
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ listaAcessos(email: String): String
---

Usuario
---
- email: String
- url: String
- nome: String
- matricula: String
- modulosAcessados: ArrayList<Modulo>
---
+ Usuario(email: String, url: String, nome: String, matricula: String)
+ registraAcesso(modulo: Modulo): void
+ listaAcessos(): String
+ hashCode(): int
+ equals(o: Object): boolean
+ toString(): String
---

UsuarioController
composes UsuarioRepositorio
---
- usuarioRepositorio: UsuarioRepositorio
---
+ UsuarioController()
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ listaAcessos(email: String): String
---

ModuloRepositorio
association RecursoEducacionalRepositorio
association UsuarioRepositorio
composes Modulo
---
- modulos: HashMap<Integer, Modulo>
- idAleatorio: int
- recursoRepositorio: RecursoEducacionalRepositorio
---
+ ModuloRepositorio(recursoRepositorio: RecursoEducacionalRepositorio, usuarioRepositorio: UsuarioRepositorio)
+ cadastraModulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidade(idModulo: int): int
+ exibe(id: int): String
+ moveRecurso(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
---

Modulo
association RecursoEducacional <Interface>
association Usuario
---
- nome: String
- recursos: LinkedList<RecursoEducacional>
- ordemObrigatoria: boolean
- acessos: ArrayList<Usuario>
---
+ Modulo(nome: String)
- getRecurso(idRecurso: int): RecursoEducacional
+ adicionaRecurso(recurso: RecursoEducacional): void
+ moveRecurso(recurso: RecursoEducacional, novaPosicao: int): void
+ getComplexidade(): int
- getMediaComplexidade(): int
+ setOrdemObrigatoria(ordemObrigatoria: boolean): void
+ registraAcesso(recurso:RecursoEducacional, usuario: Usuario): void
+ toString(): String
---

ModuloController
composes ModuloRepositorio
composes UsuarioRepositorio
---
- moduloRepositorio: ModuloRepositorio
- usuarioRepositorio: usuarioRepositorio
---
+ ModuloController(recursoRepositorio: RecursoEducacionalRepositorio, usuarioRepositorio: UsuarioRepositorio)
+ cadastraModulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidade(idModulo: int): int
+ exibeModulo(idModulo: int): String
+ moveRecurso(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
---

 "
46,"Facade
association RecursoEducacionalController
association UsuarioController
association ModuloController
---
- recursoEducacionalController: RecursoEducacionalController
- usuarioController: UsuarioController
- moduloController: ModuloController
---
+ Facade()
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ cadastraModulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

RecursoEducacionalController
association RecursoEducacionalRepository
---
- recursosEducacionais: RecursoEducacionalRepository
- modulos: ModuloRepository
---
+ RecursoEducacionalController(recursosEducacionais: RecursoEducacionalRepository, modulos: ModuloRepository)
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
---

RecursoEducacionalRepository
association RecursoEducacional <Interface>
---
- recursosEducacionais: Map<int, RecursoEducacional>
---
+ RecursoEducacionalRepository()
+ cadastraRecursoEd(id: int, recursoEducacional: RecursoEducacional): void
+ consultaRecursoEd(id: int): RecursoEducacional
---

RecursoEducacional <Interface>
---
---
+ getId(): int
+ getComplexidade(): int
---

Video
implements RecursoEducacional <Interface>
---
- id: int
- url: String
- duracao: int
---
+ Video(id: int, url: String, duracao: int)
+ getId(): int
+ getComplexidade(): int
+ equals(o: Object): boolean
+ hashCode(): int
+ toString(): String
---

Texto
implements RecursoEducacional <Interface>
---
- id: int
- texto: String
---
+ Texto(id: int, texto: String)
+ getId(): int
+ getComplexidade(): int
+ equals(o: Object): boolean
+ hashCode(): int
+ toString(): String
---

Teste
implements RecursoEducacional <Interface>
---
- id: int
- perguntas: String[]
---
+ Teste(id: int, perguntas: String[])
+ getId(): int
+ getComplexidade(): int
+ equals(o: Object): boolean
+ hashCode(): int
+ toString(): String
---

UsuarioController
association UsuarioRepository
association RecursoEducacionalRepository
association ModuloRepository
---
- usuarios: UsuarioRepository
- recursosEducacionais: RecursoEducacionalRepository
- modulos: ModuloRepository
---
+ UsuarioController(recursosEducacionais: RecursoEducacionalRepository, modulos: ModuloRepository)
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ registraAcesso(idModulo: int, idRecursoEducacional: int, email: String): void
+ ehAcessivel(idModulo: int, idRecursoEducacional: int, email: String): boolean
+ listaAcessos(email: String): String
---

UsuarioRepository
composes Usuario
---
- usuarios: Map<String, Usuario>
---
+ UsuarioRepository()
+ cadastraUsuario(email: String, usuario: Usuario): void
+ consultaUsuario(email: String): Usuario
---

Usuario
composes RegistroAcessoModulo
---
- email: String
- url: String
- nome: String
- matricula: String
- modulosAcessados: Map<int, RegistroAcessoModulo>
---
+ Usuario(email: String, url: String, nome: String, matricula: String)
+ registraAcesso(idModulo: int, idRecursoEducacional: int): void
+ foiAcessado(idModulo: int, idRecursoEducacional: int): boolean
+ getModulosAcessados(): RegistroAcessoModulo[]
+ equals(o: Object): boolean
+ hashCode(): int
+ toString(): String
---

RegistroAcessoModulo
---
- id: int
- idsRecursosEdAcessados: Set<Integer>
---
+ RegistroAcessoModulo(id: int)
+ getId(): int
+ getIdsRecursosEdAcessados(): int[]
+ registraAcesso(idModulo: int, idRecursoEducacional: int): void
+ contemRecursoEd(idRecursoEducacional: int): boolean
---

ModuloController
association ModuloRepository
---
- recursosEducacionais: RecursoEducacionalRepository
- modulos: ModuloRepository
---
+ ModuloController(recursosEducacionais: RecursoEducacionalRepository, modulos: ModuloRepository)
+ cadastraModulo(nome: String): int
+ adicionaRecursoEd(idModulo: int, idRecursoEducacional: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecursoEducacional: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
---

ModuloRepository
composes Modulo
---
- modulos: Map<int, Modulo>
---
+ ModuloRepository()
+ cadastraModulo(id: int, modulo: Modulo): void
+ consultaModulo(id: int): Modulo
---

Modulo
---
- id: int
- recursosEducacionais: List<RecursoEducacional>
- nome: string
- ordemObrigatoria: boolean
---
+ Modulo(id: int, nome: String)
+ getId(): int
+ getComplexidade(): int
+ adicionaRecursoEd(recursoEducacional: RecursoEducacional): void
+ ehAcessivel(idRecursoEducacional: int, usuario: Usuario): boolean
+ move(idRecursoEducacional: int, novaPosicao: int): void
+ setObrigatoriedade(valor: boolean): void
+ getObrigatoriedade(): boolean
+ equals(o: Object): boolean
+ hashCode(): int
+ toString(): String
---"
47,"ModulosController
composes Modulo
---
- modulos: HashMap<int, Modulo>
---
+ cadastraModulo(nome: str): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ exibeModulo(id: int): str
---

Modulo
---
- complexidade: int
- id: int- nome: str
- obrigatorio: boolean
- recursos: ArrayList<int>
---
+ Modulo(nome: str)
+ adicionaRecurso(idRecurso: int): int
+ moveRecurso(idRecurso: int, novaPosicao: int): void
+ setObrigagoriedade(obrigatorio: boolean): void
+ toString(): str
---

RecursosDeEnsinoController
composes RecursosDeEnsino <Abstract>
---
- recursosDeEnsino: HashMap<int, RecursosDeEnsino <Abstract>>
---
+ cadastraVideo(url: str, duracao: int): int
+ cadastraTexto(texto: str): int
+ cadastraPergunta(perguntas: str[]): int
+ pegaComplexidade(id: int): int+ exibe(id: int): String
---

RecursosDeEnsino <Abstract>
---
- id: int
---
+ pegaComplexidade(id: int): int
+ exibe(id: int): str
---

Video
extends RecursosDeEnsino <Abstract>
---
- url: str
- duracao: int
---
+ Video(url: str, duracao: int)
+ getComplexidade(): int
+ toString(): str
---

Texto
extends RecursosDeEnsino <Abstract>
---
- texto: str
---
+ Texto(texto: str)
+ getComplexidade(): int
+ toString(): str
---

Teste
extends RecursosDeEnsino <Abstract>
---
- perguntas: str[]
---
+ Teste(perguntas: str[])
+ getComplexidade(): int
+ toString(): str
---

UsuariosController
composes Usuario
---
- usuarios: HashMap<str, Usuario>
---
+ cadastraUsuario(email: str, url: str, nome: str, matricula: str): void
+ registraAcesso(idModulo: int, idRecurso: int, email: str): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: str): boolean
+ listaAcessos(email: str): str+ exibeUsuario(email: str): str
---

Usuario
association Modulo
---
- url: str
- nome: str
- matricula: str
- email: str
- recursosAcessados: ArrayList<int>
- modulos: HashMap<int, Modulo>
---
+ Usuario(url: str, nome: str, matricula: str, email: str)
+ registraModulo(idModulo: int, idRecurso: int): void
+ acessivel(idModulo: int, idRecurso: int): boolean
+ acessos(): str+ toString(): str
---"
48,"Facade
association ControladorRecursoEducacional
association ControladorUsuario
association ControladorModulo
---
- controladorRecurso: ControladorRecursoEducacional
- controladorUsuario: ControladorUsuario
- controladorModulo: ControladorModulo
---
+ Facade()
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ cadastraModulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

// Tudo que envolvem os Recursos Educacionais

ControladorRecursoEducacional
association RepositorioRecursoEducacional
---
- repoModulos: RepositorioModulo
- repoRecursos: RepositorioRecursoEducacional
---
+ ControladorRecursoEducacional(repoModulos: RepositorioModulo, repoRecursos: RepositorioRecursoEducacional)
+ cadastrarVideo(url: String, duracao: int): int
+ cadastrarTexto(texto: String): int
+ cadastrarPergunta(perguntas: String[]): int
+ pegarComplexidade(id: int): int
+ exibir(id: int): String
---

RecursoEducacional <Interface>
---
---
+ pegarId(): int
+ pegarComplexidade(): int
---

Video
implements RecursoEducacional <Interface>
---
- id: int
- url: String
- duracao: int
---
+ Video(id: int, url: String, duracao: int)
+ pegarId(): int
+ pegarComplexidade(): int
+ equals(outroObj: Object): boolean
+ hashCode(): int
+ toString(): String
---

Texto
implements RecursoEducacional <Interface>
---
- id: int
- texto: String
---
+ Texto(id: int, texto: String)
+ pegarId(): int
+ pegarComplexidade(): int
+ toString(): String
+ equals(outroObj: Object): boolean
+ hashCode(): int
---

Teste
implements RecursoEducacional <Interface>
---
- id: int
- perguntas: String[]
---
+ Teste(id: int, perguntas: String[])
+ pegarId(): int
+ pegarComplexidade(): int
+ toString(): String
+ equals(outroObj: Object): boolean
+ hashCode(): int
---

RepositorioRecursoEducacional
association RecursoEducacional <Interface>
---
- recursos: Map<int, RecursoEducacional>
---
+ RepositorioRecursoEducacional()
+ cadastrar(id: int, recurso: RecursoEducacional): void
+ consultar(id: int): RecursoEducacional
---

// Tudo que envolvem os Usuários e os Registros de Acesso deles

ControladorUsuario
association RepositorioUsuario
association RepositorioRecursoEducacional
association RepositorioModulo
---
- repoUsuarios: RepositorioUsuario
- repoRecursos: RepositorioRecursoEducacional
- repoModulos: RepositorioModulo
---
+ ControladorUsuario(repoRecursos: RepositorioRecursoEducacional, repoModulos: RepositorioModulo)
+ cadastrarUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibirUsuario(email: String): String
+ registrarAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listarAcessos(email: String): String
---

Usuario
composes ModuloRegistrado
---
- email: String
- url: String
- nome: String
- matricula: String
- modulosRegistrados: Map<int, ModuloRegistrado>
---
+ Usuario(email: String, url: String, nome: String, matricula: String)
+ registrarAcesso(idModulo: int, idRecurso: int): void
+ foiAcessado(idModulo: int, idRecurso: int): boolean
+ pegarModulosRegistrados(): ModuloRegistrado[]
+ toString(): String
+ equals(outroObj: Object): boolean
+ hashCode(): int
---

ModuloRegistrado
---
- idModulo: int
- recursosIdsAcessados: Set<Integer>
---
+ ModuloRegistrado(id: int)
+ pegarId(): int
+ pegarRecursosIdsAcessados(): int[]
+ existeRecurso(idRecurso: int): boolean
+ registrarAcesso(idModulo: int, idRecurso: int): void
---

RepositorioUsuario
composes Usuario
---
- usuarios: Map<String, Usuario>
---
+ RepositorioUsuario()
+ cadastrar(email: String, usuario: Usuario): void
+ consultar(email: String): Usuario
---

// Tudo que envolvem os Módulos

ControladorModulo
association RepositorioModulo
---
- repoRecursos: RepositorioRecursoEducacional
- repoModulos: RepositorioModulo
---
+ ControladorModulo(repoRecursos: RepositorioRecursoEducacional, repoModulos: RepositorioModulo)
+ cadastrarModulo(nome: String): int
+ adicionarRecurso(idModulo: int, idRecurso: int): int
+ pegarComplexidadeModulo(id: int): int
+ exibirModulo(id: int): String
+ mover(idModulo: int, idRecurso: int, novaPosicao: int): void
+ definirObrigatoriedade(idModulo: int, obrigatorio: boolean): void
---

Modulo
---
- id: int
- recursos: List<RecursoEducacional>
- nome: string
- ordemObrigatoria: boolean
---
+ Modulo(id: int, nome: String)
+ pegarId(): int
+ pegarComplexidade(): int
+ adicionarRecurso(recurso: RecursoEducacional): void
+ obterObrigatoriedade(): boolean
+ definirObrigatoriedade(valor: boolean): void
+ mover(idRecurso: int, novaPosicao: int): void
+ ehAcessivel(idRecurso: int, usuario: Usuario): boolean
+ toString(): String
+ equals(outroObj: Object): boolean
+ hashCode(): int
---

RepositorioModulo
composes Modulo
---
- modulos: Map<int, Modulo>
---
+ RepositorioModulo()
+ cadastrar(id: int, modulo: Modulo): void
+ consultar(id: int): Modulo
---"
49,"RecursoEducacional <<Abstract>>
---
- codigo: int
- complexidade: int
---
# setCodigo(codigo: int): void
# setComplexidade(complexidade: int): void
+ calculaComplexidade(): int
+ pegaComplexidade(): int
+ toString(): String
+ equals(o:Object) : boolean
+ hashCode() : int
---

RecursoDeVideo
extends RecursoEducacional <<Abstract>>
---
- url: String
- duracao: int
---
+ RecursoDeVideo(url: String, duracao: int)
+ calculaComplexidade(): int
+ pegaComplexidade(): int
+ toString() : String
+ equals(o:Object) : boolean
+ hashCode() : int
---

RecursoDeTexto
extends RecursoEducacional <<Abstract>>
---
- texto: String
---
+ RecursoDeTexto(texto: String)
+ calculaComplexidade(): int
+ pegaComplexidade(): int
+ toString() : String
+ equals(o:Object) : boolean
+ hashCode() : int
---

RecursoDeTeste
extends RecursoEducacional <<Abstract>>
---
- perguntas[]: String
---
+ RecursoDeTeste(perguntas[]: String)
+ calculaComplexidade(): int
+ pegaComplexidade(): int
+ toString() : String
+ equals(o:Object) : boolean
+ hashCode() : int
---

ControllerRecursos
composes RecursoEducacional <<Abstract>>
composes Usuario
---
- recursos: HashMap<int, Recurso>
- codigosDosRecursos: HashSet<int>
- usuarios: HashMap<String, Usuario>
---
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
- geraCodigoRecursoEducacional(): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ getPosicaoDeRecurso(): int
---

Facade
composes ControllerRecursos
composes ModuloController
---
- ControllerRecursos: cR
- ModuloController: mC
---
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ getPosicaoDeRecurso(): int
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, codigoRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, codigoRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ verificaAcesso(usuario: Usuario, idRecursoAcessado: int): boolean
+ getPosicaoRecurso(idRecurso: int): int
+ getUsuario(idUsuario: int): Usuario
---

Usuario
---
- email: String
- url: String
- nome: String
- matricula: String
- acesso: ArrayList<RecursoEducacional>
---
+ getEmail(): String
+ gePosicaoDoRecurso(): int
+ getUrl(): String
+ setUrl(): String
+ getNome(): String
+ setNome(): String
+ setMatricula(): String
+ getMatricula(): String
+ setEmail(): String
+ Usuario(email: String, url: String, nome: String, matricula: String)
+ toString(): String
+ hasCode(): int
+ equals(o:Object): boolean
+ verificaRecursosA(codigoRecurso: int): boolean
---

Modulo
composes RecursoEducacional <<Abstract>>
---
- nome: String
- idetificador: int
- recursos: LinkedList<RecursoEducacional>
- obrigatoriedade: boolean
- complexidade: int
---
+ Modulo(nome: String)
+ toString(): String
+ adicionaRecurso(recurso: RecursoEducacional): void
+ getRecursoEducacional(posicao: int): RecursoEducacional
- calculaComplexidade(): int
+ hasCode(): int
+ equals(o:Object): boolean
+ getObrigatoriedade(): boolean
+ setObrigatoriedade(obrigatorio: boolean): void
- verificaRecursoAdicionado(recurso: RecursoEducacional): boolean
+ getPosicaoDeRecurso(): int
+ getComplexidade(): int
+ verificaAcesso(usuario: Usuario, idRecursoAcessado: int): boolean
---

ModuloController
composes Modulo
association ControllerRecursos
---
- modulos: TriMap<int, modulo>
---
+ cadastraMódulo(nome: String): int
- geraCodigoModulo(): int
+ adicionaRecurso(idModulo: int, codigoRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, codigoRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
- verificaSeObrigatorio(idModulo: int): boolean
+ verificaAcesso(usuario: Usuario, idRecursoAcessado: int, idModulo: int): boolean
---"
50,"Main
association RecursosController
association ModuloController
---
---
---
RecursosController
composes Usuario
---
- mapaUsuarios: HashMap<String, Usuario>
- mapaVideos: HashMap<int, Video>
- mapaTextos: HashMap<int, Texto>
- mapaPerguntas: HashMap<int, Pergunta>
- moduloController: ModuloController
---
+ RecursosController()
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(Perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---
Usuario
composes Modulo
---
- email: String
- url: String
- nome: String
- matricula: String
- acessos: int
- listaAcessos: ArrayList<String>
---
+ Usuario(email: String, url: String, nome: String, matricula: String)
+ toString(): String
+ getEmail(): String
+ getUrl(): String
+ getNome(): String
+ getMatricula(): String
+ registraAcesso(): void
+ listaAcessos(): String
+ hashCode(): int
+ equals(o: Object): boolean
---
Video
---
- url: String
- duracao: int
---
+ Video(url: String, duracao: int)
+ toString(): String
+ pegaComplexidade(id: int): int
+ getUrl(): String
+ getDuracao(): String
+ hashCode(): int
+ equals(o: Object): boolean
---
Texto
---
- texto: String
---
+ Texto(texto: String)
+ toString(): String
+ pegaComplexidade(id: int): int
+ getTexto(): String
+ hashCode(): int
+ equals(o: Object): boolean
---
Pergunta
---
- perguntas: String[]
---
+ Pergunta(perguntas: String[])
+ toString(): String
+ pegaComplexidade(id: int): int
+ getPerguntas(): String[]
+ hashCode(): int
+ equals(o: Object): boolean
---
ModuloController
---
- mapaModulos: HashMap<int, Modulo>
---
+ ModuloController ()
+ cadastraModulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
---
Modulo
composes RecursosController
---
- nome: String
- mapaModuloRecurso: HashMap<Modulo, int>
---
+ Modulo(nome: String)
+ adicionaRecurso(idModulo: int, idRecurso: int): void
+ toString(): String
+ pegaComplexidadeModulo(id: int): int
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ hashCode(): int
+ equals(o: Object): boolean
---"
51,"Recurso <<Interface>>
---
---
+ getComplexidade(): int

+ toString(): String
---
FacadeEEEI
association ControllerRecursosEducacionais
association ControllerUsuario
---
- controleRecursos: ControllerRecursosEducacionais
- controleUsuario: ControllerUsuario
---
+ FacadeEEEI()

+ cadastraVideo(url: String, duracao: int): int

+ cadastraTexto(texto: String): int

+ cadastraPergunta(perguntas: String[]): int

+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void

+ exibeUsuario(email: String): String

+ cadastraMódulo(nome: String): int

+ adicionaRecurso(idModulo: int, idRecurso: int): int

+ pegaComplexidadeModulo(id: int): int

+ exibeModulo(id: int): String

+ move(idModulo: int, idRecurso: int, novaPosicao: int): void

+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void

+ registraAcesso(idModulo: int, idRecurso: int, email: String): void

+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean

+ listaAcessos(email: String): String

---

ControllerRecursosEducacionais
composes Recurso <<Interface>>
composes Modulo
---
- recursos: HashMap<Integer,Recurso>
- modulos: HashMap<Integer, Modulo>
- geraID: int
---
+ ControllerRecursosEducacionais()

+ cadastraVideo(url: String, duracao: int): int

+ cadastraTexto(texto: String): int

+ cadastraPergunta(perguntas: String[]): int

+ cadastraMódulo(nome: String): int

+ adicionaRecurso(idModulo: int, idRecurso: int): int

+ pegaComplexidadeModulo(id: int): int

+ exibeModulo(id: int): String

+ move(idModulo: int, idRecurso: int, novaPosicao: int): void

+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void

---
Modulo
---
- recursos: ArrayList<Recurso>
- complexidade: int
- ordemObrigatoria: boolean
---
+ Modulo(nome: String)
+ adicionaRecurso(recurso: Recurso): int
+ move(idRecurso: int, novaPosicao: int): void
+ getComplexidade():int
+ toString(): String
+ setOrdemObrigatoria(ordemObrigatoria:boolean):void
+ getRecurso(idRecurso:int):Recurso
+ getOrdemObrigatoria():boolean

---

ControllerUsuario
association ControllerRecursosEducacionais
composes Usuario
---
- controlleRecursos: ControllerRecursosEducacionais
- usuarios: HashMap<Integer,Usuario>
- geraID: int
---
+ ControllerUsuario()

+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void

+ exibeUsuario(email: String): String

+ registraAcesso(idModulo: int, idRecurso: int, email: String): void

+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean

+ listaAcessos(email: String): String
---
Usuario

---
- email: String
- url: String
- nome: String
- matricula: String
- recursosAcessiveis: ArrayList<Recurso>
---
+ Usuario (email: String, url: String, nome: String, matricula: String)
+ equals(o: Object): boolean
+ hashCode(): int
+ toString(): String
+ adicionaRecurso(recurso: Recurso):void
+ vericacaoRecursoAcessivel(recurso: Recurso):boolean
+ listaAcessos():String
---
Video
implements Recurso <<Interface>>
---
- url: String
- duracao: int
- complexidade: int
---
+ Video(url: String, duracao: int)
+ equals(o: Object): boolean
+ hashCode(): int
+ toString(): String
+ getComplexidade():int
---
Texto
implements Recurso <<Interface>>
---
- texto: String
- complexidade: int
---
+ Texto(texto: String)
+ equals(o: Object): boolean
+ hashCode(): int
+ toString(): String
+ getComplexidade():int
---
Teste
implements Recurso <<Interface>>
---
- perguntas: String[]
- complexidade: int
---
+ Teste(perguntas:String[])
+ equals(o: Object): boolean
+ hashCode(): int
+ toString(): String
+ getComplexidade():int
---"
52,"Facade
composes EeeiController
---
- eeei: EeeiController
---
+ Facade()
+ cadastraVideo(url: str, duracao: int): int
+ cadastraTexto(texto: str): int
+ cadastraPergunta(perguntas: str[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): str
+ cadastraUsuario(email: str, url: str, nome: str, matricula: str): void
+ exibeUsuario(email: str): str
+ cadastraMódulo(nome: str): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): str
+ moveRecursoNoModulo(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedadeDaOrdemDosRecursosDoModulo(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: str): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: str): boolean
+ listaAcessos(email: str): str
---

EeeiController
composes RecursoEducacional <interface>
composes Usuario
composes Modulo
composes AcessosUsuario
---
- recursosEducacionais: HashMap<id, RecursoEducacional>
- usuarios: HashMap<email, Usuario>
- modulos: HashMap<id, Modulo>
- id: int
- historicoDeAcessos: HashMap<emailUsuario, AcessosUsuario>
---
+ EeeiController()
+ cadastraVideo(url: str, duracao: int): int
+ cadastraTexto(texto: str): int
+ cadastraPergunta(perguntas: str[]): int
- atualizaId(): void
+ pegaComplexidade(id: int): int
+ exibe(id: int): str
+ cadastraUsuario(email: srt, url: str, nome: str, matricula: str): void
+ exibeUsuario(email: str): str
+ cadastraMódulo(nome: str): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): str
+ moveRecursoNoModulo(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedadeDaOrdemDosRecursosDoModulo(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: str): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: str): boolean
+ listaAcessos(email: str): str
---

RecursoEducacional <interface>
---
---
+ pegaComplexidade(id: int): int
---

Video
implements RecursoEducacional <interface>
---
- url: str
- duracao : int
- id: int
---
+ Video(url: str, duracao: int, id: int)
+ pegaComplexidade(id: int): int
+ getId(): int
+ hashCode(): int
+ equals(o: Object): boolean
+ toString(): str
---

Texto
implements RecursoEducacional <interface>
---
- texto: str
- id: str
---
+ Texto(texto: str, id: int)
+ pegaComplexidade(id: int): int
+ hashCode(): int
+ equals(o: Object): boolean
+ toString(): str
---

Teste
implements RecursoEducacional <interface>
---
- perguntas: str[]
- id: int
---
+ Teste(perguntas: str[], id: int)
+ pegaComplexidade(id: int): int
+ hashCode(): int
+ equals(o: Object): boolean
+ toString(): str
---

Usuario
---
- email: str
- url: str
- nome: str
- matricula: str
---
+ Usuario(email: str, url: str, nome: str, matricula: str)
+ hashCode(): int
+ equals(o: Object): boolean
+ toString(): str
---

Modulo
---
- nome: str
- id: int
- recursosEducaionais: List<id, RecursoEducacional>
- ordemDosRecursosObrigatoria: boolean
---
+ Modulo(nome: str, id: int)
+ adicionaRecurso(id: int, recursoEducacional: RecursoEducacional): int
+ pegaComplexidade(): int
+ moveRecurso(idRecurso: int, novaPosicao: int): void
+ setOrdemDosRecursosObrigatoria(obrigatoriedade: boolean): void
+ getOrdemDosRecursosObrigatoria(): boolean // True se houver obrigatoriedade no módulo, false caso contrário.
+ getIdRecusos(): int[] // Retorna os ids dos recursos na ordem em que se encontram.
+ hashCode(): int
+ equals(o: Object): boolean
+ toString(): str
---

AcessosUsuario
composes Acesso
---
- emailUsuario: str
- acessos: HashMap<idModulo, Acesso>
---
+ AcessosUsuario(emailUsuario: str)
+ cadastraAcesso(emailUsuario: str, idModulo: int): void
+ registraAcessoRecursoEducacional(idModulo: int, id: recurso): void
+ getAcesso(idModulo: int): Acesso
+ hashCode(): int
+ equals(o: Object): boolean
+ toString(): str // Retorna a exibição de todos os acessos do usuário.
---

Acesso
---
- emailUsuario: str
- idModulo: int
- idRecursosEducacionais: List<Integer> //guarda os ids dos recursos na ordem de acesso.
---
+ Acesso(emailUsuario: str, idModulo: int)
+ registraAcessoRecursoEducacional(idRecurso: recurso): void
+ getIdRecusos(): int[] // Retorna os ids dos recursos já acessados pelo = usuário no módulo.
+ hashCode(): int
+ equals(O: Object): boolean
+ toString(): str // Retorna a exibição dos acessos do usuário no módulo.
---

 "
53,"Facade
association ControllerRecursoEducacional
association ControllerUsuario
association ControllerModulo
---
- controllerRecurso: ControllerRecursoEducacional
- controllerUsuario: ControllerUsuario
- controllerModulo: ControllerModulo
---
+ Facade()
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ cadastraModulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

ControllerRecursoEducacional
association RecursoEducacionalRepository
---
- recursosR: RecursoEducacionalRepository
- modulosR: ModuloRepository
---
+ ControllerRecursoEducacional(recursosR: RecursoEducacionalRepository, modulosR: ModuloRepository)
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
---

RecursoEducacional <Interface>
---
---
+ getComplexidade(): int
+ getId(): int
---

Video
implements RecursoEducacional <Interface>
---
- id: int
- url: String
- duracao: int
---
+ Video(id: int, url: String, duracao: int)
+ getComplexidade(): int
+ getId(): int
+ toString(): String
+ hashCode(): int
+ equals(outro: Object): boolean
---

Texto
implements RecursoEducacional <Interface>
---
- id: int
- texto: String
---
+ Texto(id: int, texto: String)
+ getComplexidade(): int
+ getId(): int
+ toString(): String
+ hashCode(): int
+ equals(outro: Object): boolean
---

Teste
implements RecursoEducacional <Interface>
---
- id: int
- perguntas: String[]
---
+ Teste(id: int, perguntas: String[])
+ getComplexidade(): int
+ getId(): int
+ toString(): String
+ hashCode(): int
+ equals(outro: Object): boolean
---

ControllerUsuario
association UsuarioRepository
association RecursoEducacionalRepository
association ModuloRepository
---
- usuarios: UsuarioRepository
- recursos: RecursoEducacionalRepository
- modulos: ModuloRepository
---
+ ControllerUsuario(recursos: RecursoEducacionalRepository, modulos: ModuloRepository)
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

Usuario
composes RegistroModulo
---
- email: String
- url: String
- nome: String
- matricula: String
- modulosRegistrados: Map<int, RegistroModulo>
---
+ Usuario(email: String, url: String, nome: String, matricula: String)
+ registraAcesso(idModulo: int, idRecurso: int): void
+ foiAcessado(idModulo: int, idRecurso: int): boolean
+ getModulosRegistrados(): RegistroModulo[]
+ toString(): String
+ hashCode(): int
+ equals(outro: Object): boolean
---

RegistroModulo
---
- id: int
- idsRecursosAcessados: Set<Integer>
---
+ RegistroModulo(id: int)
+ getId(): int
+ getIdsRecursosAcessados(): int[]
+ registraAcesso(idModulo: int, idRecurso: int): void
+ temRecurso(idRecurso: int): boolean
---

ControllerModulo
association ModuloRepository
---
- recursosR: RecursoEducacionalRepository
- modulosR: ModuloRepository
---
+ ControllerModulo(recursosR: RecursoEducacionalRepository, modulosR: ModuloRepository)
+ cadastraModulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
---

Modulo
---
- recursos: List<RecursoEducacional>
- id: int
- nome: string
- ordemObrigatoria: boolean
---
+ Modulo(id: int, nome: String)
+ getComplexidade(): int
+ getId(): int
+ adicionaRecurso(recurso: RecursoEducacional): void
+ ehAcessivel(idRecurso: int, usuario: Usuario): boolean
+ move(idRecurso: int, novaPosicao: int): void
+ setObrigatoriedade(valor: boolean): void
+ getObrigatoriedade(): boolean
+ toString(): String
+ hashCode(): int
+ equals(outro: Object): boolean
---

RecursoEducacionalRepository
association RecursoEducacional <Interface>
---
- recursos: Map<int, RecursoEducacional>
---
+ RecursoEducacionalRepository()
+ consulta(id: int): RecursoEducacional
+ cadastra(id: int, recurso: RecursoEducacional): void
---

UsuarioRepository
composes Usuario
---
- usuarios: Map<String, Usuario>
---
+ UsuarioRepository()
+ consulta(email: String): Usuario
+ cadastra(email: String, usuario: Usuario): void
---

ModuloRepository
composes Modulo
---
- modulos: Map<int, Modulo>
---
+ ModuloRepository()
+ consulta(id: int): Modulo
+ cadastra(id: int, modulo: Modulo): void
---"
54,"Facade
association ControllerRecursoEducacional
association ControllerUsuario
association ControllerModulo
---
- controllerUsuario: ControllerUsuario
- controllerRecursos: ControllerRecursoEducacional
---
+ Facade()
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

// =================================================== USUÁRIO ===

ControllerUsuario
composes Usuario
---
- usuarios: HashMap<String, Usuario>
---
+ ControllerUsuario()
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ buscaUsuario(email: String): Usuario
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

Usuario
---
- email: String
- url: String
- nome: String
- matricula: String
- acessos: HashMap<int, ArrayList<int>>
---
+ Usuario(email: String, url: String, nome: String, matricula: String)
+ toString(): String
+ equals(o: Object): boolean
+ hashCode(): int
+ getEmail(): String
+ registraAcesso(idModulo: int, idRecurso: int): void
+ ehAcessivel(idModulo: int, idRecurso: int): boolean
+ listaAcessos(): String
---

// ============================================= RECURSOS EDU. ===

ControllerRecursoEducacional
composes RecursoEducacional<Interface>
---
- recursos: HashMap<int, RecursoEducacional>
---
+ ControllerRecursoEducacional()
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ getRecurso(IdRecurso: int): RecursoEducacional
---

RecursoEducacional<Interface>
---
---
+ calculaComplexidade(): int
+ getComplexidade(): int
+ getID(): int
+ toString(): String
+ hashCode(): int
---

Video
implements RecursoEducacional<Interface>
---
- url: String
- duracao: int
- complexidade: int
- ID: int
---
+ Video(url: String, duracao: int)
+ calculaComplexidade(): int
+ getComplexidade(): int
+ getID(): int
+ toString(): String
+ hashCode(): int
+ equals(o: Object): boolean
---

Texto
implements RecursoEducacional<Interface>
---
- texto: String
- complexidade: int
- ID: int
---
+ Texto(texto: String)
+ calculaComplexidade(): int
+ getComplexidade(): int
+ getID(): int
+ toString(): String
+ hashCode(): int
+ equals(o: Object): boolean
---

Teste
implements RecursoEducacional<Interface>
---
- perguntas: String[]
- complexidade: int
- ID: int
---
+ Teste(perguntas: String[])
+ calculaComplexidade(): int
+ getComplexidade(): int
+ getID(): int
+ toString(): String
+ hashCode(): int
+ equals(o: Object): boolean
---

// ==================================================== MODULO ===

ControllerModulo
composes Modulo
---
- modulos: HashMap<int, Modulo>
---
+ ControlleModulo()
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, recurso: RecursoEducacional): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, recurso: RecursoEducacional, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
---

Modulo
aggregates RecursoEducacional<Interface>
---
- nome: String
- recursos: ArratList<RecursoEducacional>
- complexidade: int
- ID: int
- obrigatorioOrdem: boolean
---
+ Modulo(nome: String)
+ adicionaRecurso(recurso: Recurso): void
+ calculaComplexidade(): int
+ getComplexidade(): int
+ getID(): int
+ move(recurso: RecursoEducacional, novaPosicao: int): void
+ setObrigatoriedade(novoValor: boolean): void
+ getObrigatoriedade(): boolean
+ toString(): String
+ hashCode(): int
+ equals(o: Object): boolean
---"
55,"Main
association EEEI
---
---
---

EEEI
composes Recurso <Interface>
composes Usuario
composes Modulo
---
- recursosCadastrados : HashMap<int, Recurso <Interface>>;
- usuarios : HashMap<String, Usuario>;
- modulos: HashMap<int, Modulo>;
- idsCadastrados: List<int>;
---
+ EEEI();
+ cadastraVideo(url: String, duracao: int): int;
+ cadastraTexto(texto: String): int;
+ cadastraPergunta(perguntas: String[]): int;
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String;
+ cadastraMódulo(nome: String): int;
+ adicionaRecurso(idModulo: int, idRecurso: int): int;
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

Usuario
---
- url: String;
- nome: String;
- matricula: String;
---
+ Usuario(url: String, nome: String, matricula: String);
+ toString() : String;
+ hashCode(): int;
+ equals(): boolean;
---

Modulo
composes Recurso <Interface>
---
- nome: String;
- obrigatoriedade : boolean;
- recursosModulo: LinkedHashMap<Recurso <Interface>>

---
+ Modulo(nome: String);
+ calculoComplexidade() : int;
+ getComplexidade() : int;
+ setPosicaoRecurso(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ getObrigatoriedade(): boolean;
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ listaAcessos(): String
+ toString() : String;
+ hashCode(): int;
+ equals(): boolean;
---

Recurso <Interface>
---
---
+ calculoComplexidade() : int;
+ getComplexidade() : int;
+ toString() : String;
+ equals(): boolean;
+ hashCode() : int;
---

Texto
implements Recurso <Interface>
---
- texto: String;
- complexidade: int;
- acessos : ArrayList<Usuario>;
---
+ Texto(texto: String);
+ calculoComplexidade() : int;
+ getComplexidade() : int;
+ toString() : String;
+ equals(): boolean;
+ hashCode() : int;
---

Video
implements Recurso <Interface>
---
- url: String;
- duracao: int;
- complexidade: int;
- acessos : ArrayList<Usuario>;
---
+ Video();
+ calculoComplexidade(url: String, duracao: int) : int;
+ getComplexidade() : int;
+ toString() : String;
+ equals(): boolean;
+ hashCode() : int;
---

Teste
implements Recurso <Interface>
---
- perguntas: String[];#
- complexidade: int;
- acessos : ArrayList<Usuario>;
---
+ Teste(perguntas: String[]);
+ calculoComplexidade() : int;
+ getComplexidade() : int;
+ toString() : String;
+ equals(): boolean;
+ hashCode() : int;
---"
56,"Main
association Facade
---
---
---

Facade
association SistemaController
---
- sistemaController: SistemaController
---
+ Facade()
+ inicializa():void
+ cadastraVideo(url:str, duracao:int):int
+ cadastraTexto(texto:str):int
+ cadastraPergunta(perguntas:str[]):int
+ pegaComplexidade(id:int):int
+ exibe(id:int):str
+ cadastraUsuario(email:str, url:str, nome:str, matricula:str): void
+ exibeUsuario(email:str):str
+ cadastraMódulo(nome:str):int
+ adicionaRecurso(idModulo:int, idRecurso:int):int
+ pegaComplexidadeModulo(id:int):int
+ exibeModulo(id:int):str
+ move(idModulo:int, idRecurso:int, novaPosicao:int):void
+ defineObrigatoriedade(idModulo:int, obrigatorio:boolean):void
+ registraAcesso(idModulo:int, idRecurso:int, email:str):void
+ ehAcessivel(idModulo:int, idRecurso:int, email:str):boolean
+ listaAcessos(email:str):str
---

SistemaController
association RecursoEducacionalController
association UsuarioController
association ModuloController
---
- recursoEducacionalController: RecursoEducacionalController
- usuarioController: UsuarioController
- moduloController: ModuloController
---
+ SistemaController()
+ cadastraVideo(url:str, duracao:int):int
+ cadastraTexto(texto:str):int
+ cadastraTeste(perguntas:str[]):int
+ getComplexidadeRecurso(id:int):int
+ toStringRecurso(id:int):str
+ cadastraUsuario(email:str, url:str, nome:str, matricula:str): void
+ toStringUsuario(email:str):str
+ cadastraModulo(nome:str):int
+ adicionaRecursoEmModulo(idModulo:int, idRecurso:int): int
+ getComplexidadeModulo(id:int):int
+ toStringModulo(id:int):str
+ moveRecursoEmModulo(idModulo:int, idRecurso:int, novaPosicao:int):void
+ setOrdemDosRecursosObrigatorioEmModulo(idModulo:int, obrigatorio:boolean):void
+ registraAcessoRecursoUsuario(email:str, idModulo:int, idRecurso:int):void
+ verificaAcessoUsuarioEmRecursoDeModulo(email: String, idModulo:int, idRecurso:int):boolean
+ listaRecursosAcessadosUsuario(email:str):str
---

// No cadastro de qualquer recurso o RecursoEducacionalController gera e atribui o id do recurso utilizando o método geraIdRecurso em cada método de cadastro

RecursoEducacionalController
association RecursoEducacional <Interface>
---
- recursosEducacionais: Map<int, RecursoEducacional <Interface>>
---
+ RecursoEducacionalController()
- geraIdRecurso():int
+ cadastraVideo(url:str, duracao:int):int
+ cadastraTexto(texto:str):int
+ cadastraTeste(perguntas:str[]):int
+ getComplexidadeRecurso(id:int):int
+ toStringRecurso(id:int):str
+ getRecurso(id:int):RecursoEducacional <Interface>
---

RecursoEducacional <Interface>
---
---
+ getComplexidade():int
+ getId():int
---

RecursoEducacional <Abstract>
implements RecursoEducacional <Interface>
---
- id:int
---
+ RecursoEducacional(id:int)
+ getComplexidade():int
+ getId():int
+ toString():str
+ equals(obj: Object):boolean
+ hasCode():int
---

Video
extends RecursoEducacional <Abstract>
---
- url:str,
- duracao:int
---
+ Video(id:int, url:str, duracao:int)
+ getComplexidade():int
+ getId():int
+ toString():str
---

Texto
extends RecursoEducacional <Abstract>
---
- texto:str
---
+ Texto(id:int, texto:str)
+ getComplexidade():int
+ getId():int
+ toString():str
---

Teste
extends RecursoEducacional <Abstract>
---
- perguntas:str[]
---
+ Teste(id:int, perguntas:str[])
+ getComplexidade():int
+ getId():int
+ toString():str
---

UsuarioController
composes Usuario
---
- usuarios: Map<str, Usuario>
---
+ cadastraUsuario(email:str, url:str, nome:str, matricula:str): void
+ toStringUsuario(email:str):str
+ registraAcessoRecursoUsuario(email:str, idRecurso:int, idModulo:int):void
+ getRecursosAcessadosEmModuloUsuario(email:str, idModulo:int):List<AcessoRecurso>
+ listaRecursosAcessadosUsuario(email:str):str
---

Usuario
association AcessoRecurso
---
- email:str
- url:str
- nome:str
- matricula:str
- recursosAcessados: List<AcessoRecurso>
---
+ Usuario(email:str, url:str, nome:str, matricula:str)
+ registraAcessoRecurso(idRecurso:int, idModulo:int):void
+ getRecursosAcessadosEmModulo(idModulo:int):List<AcessoRecurso>
+ listaRecursosAcessados():str
+ toString():str
+ equals(obj: Object):boolean
+ hasCode():int
---

AcessoRecurso
---
- idRecurso:int
- idModulo:int
---
+ AcessoRecurso(idRecurso:int, idModulo:int)
+ getIdModulo():int
+ getIdRecurso():int
+ toString():str
---

// No cadastro de um módulo o ModuloController gera e atribui o id do modulo utilizando o método geraIdModulo no método cadastraModulo

ModuloController
composes Modulo
---
- modulos: Map<int, Modulo>
---
+ ModuloController()
- geraIdModulo():int
+ cadastraModulo(nome:str):int
+ adicionaRecursoEmModulo(idModulo:int, recurso:RecursoEducacional <Interface>):int
+ getComplexidadeModulo(id:int):int
+ toStringModulo(id:int):str
+ moveRecursoEmModulo(idModulo:int, idRecurso:int, novaPosicao:int):void
+ setOrdemDosRecursosObrigatorioEmModulo(idModulo:int, obrigatorio:boolean):void
+ verificaAcessoUsuarioEmRecursoDeModulo(idModulo:int, idRecurso:int, recursosAcessados:List<AcessoRecurso>):boolean
---

Modulo
association RecursoEducacional <Interface>
association AcessoRecurso
---
- id:int
- nome:str
- recursosEducacionais: List<RecursoEducacional <Interface>>
- ordemDosRecursosObrigatorio:boolean
---
+ Modulo(id:int, nome:str)
+ adicionaRecurso(recurso:RecursoEducacional <Interface>):void
+ getComplexidade():int
+ moveRecurso(idRecurso:int, novaPosicao:int):void
+ setOrdemDosRecursosObrigatorio(obrigatorio: boolean):void
+ verificaAcessoUsuarioEmRecurso(idRecurso:int, recursosAcessados:List<AcessoRecurso>):boolean
+ toString():str
+ equals(obj: Object):boolean
+ hasCode():int
---"
57,"RecursoEducacional <<abstract>>
---
# id: int

# complexidade: int
---
+ calculaComplexidade():int
+ toString():String
+ equals(recurso: RecursoEducacional): boolean
+ hashCode(): int
+ getId():int

+ setComplexidade(complexidade: int):void
---

Video
extends RecursoEducacional <<abstract>>
---
- url: String
- duracao: int
---
+ Video(url: String, duracao: int, id:int)
+ calculaComplexidade(): int
+ toString(): String
---

Texto
extends RecursoEducacional <<abstract>>
---
- texto: String
---
+ Texto(texto: String, id: int)
+ calculaComplexidade(): int
+ toString(): String
---

Teste
extends RecursoEducacional <<abstract>>
---
- pergutas: String[]
---
+ Teste(perguntas: String[], id: int)
+ calculaComplexidade(): int
+ toString(): String
---

RecursoController
composes RecursoEducacional <<abstract>>
---
- recursos: HashMap<int, RecursoEducacional>
---
+ RecursoController()
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
- geraId():int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ getRecurso(id: int): RecursoEducacional
---

Usuario
association RecursoEducacional <<abstract>>
---
- email: String
- nome: String
- matricula: String
- url: String
- recursosAcessados: List<RecursoEducacional>
---
+ Usuario(email: String, url: String nome: String, matricula: String)
+ toString():String
+ acessaRecurso(recurso: RecursoEducacional):void
+ verificaRecursoAcessado(idRecurso: int):boolean
+ listaAcessos(): String
---

UsuarioController
composes Usuario

---
- usuarios: HashMap<String, Usuario>
---
+ UsuarioController()
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ registraAcesso(email: String, recurso :RecursoEducacional):void
+ getUsuario(email: String):Usuario
+ listaAcessos(email: String): String
---

Modulo
association RecursoEducacional <<abstract>>
---
- nome: String
- id: int
- complexidade: int
- recursos: LinkedHashSet<RecursoEducacional>
- obrigatoriedade: boolean
---
+ Modulo(nome: String, id: int)
+ calculaComplexidade(): int
+ adicionaRecurso(recurso: RecursoEducacional):void
+ toString():String
+ move(idRecurso:int, posicao2: int):void
+ defineObrigatoriedade(obrigatoriedade: boolean):void
+ getObrigatoriedade():boolean
+ verificaAcessibilidade(usuario: Usuario, idRecurso: int):boolean
+ getPosicaoRecurso(idRecurso: int):int

+ hashCode(): int

+ equals(modulo: Modulo): boolean
---

ModuloController
composes Modulo
association Usuario
---
- modulos: HashMap<int, Modulo>
---

+ ModuloController()
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, recurso: RecursoEducacional): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
- geraId():int
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ getModulo(id: int): Modulo
+ verificaAcessibilidade(usuario: Usuario, idModulo: int, idRecurso: int):boolean
---

Facade
composes UsuarioController
composes RecursoController
composes ModuloController
---
- controleRecursos: RecursoController
- controleUsuarios: UsuarioController
- controleModulos: ModuloController
---
+ Facade()
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: id): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---"
58,"Main
association Facade
---
---
---

RecursosEducacionais <<Abstract>>
---
# id: int
# complexidade: int
---
+ getId(): int
+ calculaComplexidade(): void //Método abstrato
---

Video
extends RecursosEducacionais <<Abstract>>
---
- url: String
- duracaoVideo: int
---
+ Video(url: String, duracaoVideo: int)
+ calculaComplexidade(): void
+ getComplexidade(): int
+ toString(): String
---

Texto
extends RecursosEducacionais <<Abstract>>
---
- texto: String
---
+ Texto(texto: String)
+ calculaComplexidade(): void
+ getComplexidade(): int
+ toString(): String
---

Teste
extends RecursosEducacionais <<Abstract>>
---
- perguntas: String[] //Array de strings
---
+ Teste(perguntas: String[])
+ calculaComplexidade(): void
+ getComplexidade(): int
+ toString(): String
---

ControlerRecursosEducacionais
composes RecursosEducacionais <<Abstract>>
---
- recursosEducacionais: Map<int, RecursosEducacionais <<Abstract>>> // Key - inteiro produzido no cadastro / Value - RecursosEducacionais <<Abstract>>.
---
+ ControlerRecursosEducacionais()
+ getRecursoEducacional(idRecurso: int): RecursosEducacionais <<Abstract>>
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
---

Usuario
assosciation RecursosEducacionais <<Abstract>>
---
- email: String
- url: String
- nome: String
- matricula: String
- recursosAcessados: List<RecursosEducacionais <<Abstract>>>
---
+ Usuario(email: String, url: String, nome: String, matricula: String)
+ registraAcesso(idModulo: int, idRecurso: int): void
+ ehAcessivel(idModulo: int, idRecurso: int): boolean
+ listaAcessos(): String
+ toString(): String
---

ControlerUsuario
composes Usuario
---
- usuarios: Map<String, Usuario>
---
+ ControlerUsuario()
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

Modulo
assosciation RecursosEducacionais <<Abstract>>
---
- id: int
- nome: String
- recursosEducacionais: Set<RecursosEducacionais <<Abstract>>>
- complexidade: int
- obrigatorio: boolean
---
+ Modulo(nome: String) //Set inicializado como LinkedHashSet
+ adicionaRecurso(idRecurso: int): void
+ calculaComplexidade(): void
+ getComplexidade(): int
+ move(Recurso: RecursosEducacionais <<Abstract>>, novaPosicao: int): void
+ setObrigatorio(obrigatorio: boolean): void
+ getObrigatorio(): boolean
+ hashCode(): int
+ equals(modulo: Modulo): boolean
+ toString(): String
---

ControlerModulo
composes Modulo
---
- modulos: Map<int, Modulo> // Key - inteiro produzido no cadastro / Value - Modulo.
---
+ ControlerModulo()
+ getModulo(idModulo: int): Modulo
+ cadastraModulo(nome: String): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
---

ControlerGeral
association ControlerUsuario
association ControlerModulo
association ControlerRecursosEducacionais
---
- controlerUsuario: ControlerUsuario
- controlerModulo: ControlerModulo
- ControlerRecursosEducacionais: ControlerRecursosEducacionais
---
+ ControlerGeral()
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ cadastraModulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

Facade
association ControlerGeral
---
- controlerGeral: ControlerGeral
---
+ Facade()
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ cadastraModulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

Validator
---
---
+ testaNull(object: Object, msg: String): void
+ testaInvalido(string: String, msg: String): void
---"
59,"ControladorPrincipal
composes RecursoEducacional<Interface>
composes ControllerUsuario
composes ControllerModulo
---
- recursosEducacionais: HashMap<int, RecursoEducacional>
- usuarios: ControllerUsuario
- modulos: ControllerModulo
---
+ ControladorPrincipal()
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

RecursoEducacional<Interface>
---
---
+ pegaComplexidade(): int
- hashCode(): int
- equals(): int
+ toString(): String
---

Video
implements RecursoEducacional<Interface>
---
- url: String
- duracaoVideo: int
- complexidade: int
- id: int
---
+ Video(url: String, duracao: int)
+ pegaComplexidade(): int
- hashCode(): int
- equals(): int
+ toString(): String
---

Texto
implements RecursoEducacional<Interface>
---
- texto: String
- complexidade: int
- id: int
---
+ Texto(texto: String)
+ pegaComplexidade(): int
- hashCode(): int
- equals(): int
+ toString(): String
---

Pergunta
implements RecursoEducacional<Interface>
---
- perguntas: String[]
- complexidade: int
- id: int
---
+ Pergunta(perguntas: String[])
+ pegaComplexidade(): int
- hashCode(): int
- equals(): int
+ toString(): String
---

ControllerUsuario
composes Usuario
---
- usuarios: HashMap<String, Usuario>
---
+ ControllerUsuario()
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

Usuario
---
- email: String
- urlFoto: String
- nome: String
- matricula: int
- acessos: ArrayList<Integer>
---
+ Usuario(email: String, url: String, nome: String, matricula: String)
+ registraAcesso(idModulo: int, idRecurso: int): void
+ listaAcessos(): String
- hashCode(): int
+ ehAcessivel(idModulo: int, idRecurso: int): boolean
- equals(): int
+ toString(): String
+ listaAcessos(email: String): String
---

Modulo
composes RecursoEducacional<Interface>
---
- nomeModulo: String
- complexidade: int
- recursos: ArrayList<RecursoEducacional>
- ordemObrigatoria: boolean
---
+ Modulo(nome: String)
+ adicionaRecurso(recurso: RecursoEducacional): int
+ verificaExistenciaRecurso(idRecurso: int): boolean
+ pegaComplexidadeModulo(): int
+ move(idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(obrigatorio: boolean): void
+ ehObrigatorio(): boolean
- hashCode(): int
- equals(): int
+ toString(): String
---

ControllerModulo
composes Modulo
---
- modulos: HashMap<int, Modulo>
---
+ ControllerModulo()
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(idModulo: int): int
+ verificaExistenciaRecurso(idModulo: int, idRecurso: int): boolean
+ pegaComplexidadeModulo(): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ verificaExistenciaModulo(idModulo: int): boolean
+ verificaExistenciaRecurso(idModulo: int, idRecurso: int): boolean
+ ehObrigatorio(idModulo: int): boolean
---

Facade
composes ControladorPrincipal
---
- ControladorPrincipal : ControladorPrincipal
---
+ Facade()
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---"
60,"main
association Facade
---
---
---

Facade
composes EEEI
---
---
+ Facade()
+ cadastraVideo(url : String, duracao : int) : int
+ cadastraTexto(texto : String) : int
+ cadastraPergunta(perguntas : String[]) : int
+ pegaComplexidade(id : int) : int
+ exibe(id : int) : String
+ cadastraUsuario(email : String, url : String, nome : String, matricula : String) : void
+ exibeUsuario(email : String) : String
+ cadastraMódulo(nome : String) : int
+ adicionaRecurso(idModulo : int, idRecurso : int) : int
+ pegaComplexidadeModulo(id : int) : int
+ exibeModulo(id : int) : String
+ move(idModulo : int, idRecurso : int, novaPosicao : int) : void
+ defineObrigatoriedade(idModulo : int, obrigatorio : boolean) : void
+ registraAcesso(idModulo : int, idRecurso : int, email : String) : void
+ ehAcessivel(idModulo : int, idRecurso : int, email : String) : boolean
+ listaAcessos(email : String) : String
---

EEEI
composes RecursosController
composes ModuloController
---
- controllerRecursos : RecursosController
- controllerModulo : ModuloController
---
+ EEEI()
+ cadastraVideo(url : String, duracao : int) : int
+ cadastraTexto(texto : String) : int
+ cadastraPergunta(perguntas : String[]) : int
+ pegaComplexidade(id : int) : int
+ exibe(id : int) : String
+ cadastraUsuario(email : String, url : String, nome : String, matricula : String) : void
+ exibeUsuario(email : String) : String
+ cadastraMódulo(nome : String) : int
+ adicionaRecurso(idModulo : int, idRecurso : int) : int
+ pegaComplexidadeModulo(id : int) : int
+ exibeModulo(id : int) : String
+ move(idModulo : int, idRecurso : int, novaPosicao : int) : void
+ defineObrigatoriedade(idModulo : int, obrigatorio : boolean) : void
+ registraAcesso(idModulo : int, idRecurso : int, email : String) : void
+ ehAcessivel(idModulo : int, idRecurso : int, email : String) : boolean
+ listaAcessos(email : String) : String
---

RecursosController
composes Usuario
composes RecursoEducacional <Abstract>
---
- usuariosRepositorio : HashMap<String,Usuario>
- recursosEducacionaisRepositorio : HashMap<int,RecursoEducacional>
---
+ RecursosController()
+ cadastraVideo(url : String, duracao : int) : int
+ cadastraTexto(texto : String) : int
+ cadastraPergunta(perguntas : String[]) : int
+ pegaComplexidade(id : int) : int
+ exibe(id : int) : String
+ cadastraUsuario(email : String, url : String, nome : String, matricula : String) : void
+ exibeUsuario(email : String) : String
+ getRecurso() : RecursoEducacional
---

Usuario
---
- email : String
- url : String
- nome : String
- matricula : String
---
+ Usuario(email : String, url : String, nome : String, matricula : String)
+ toString() : String
+ hashCode() : int
+ equals(obj : Object) : boolean
---

RecursoEducacional <Abstract>
---
---
+ getComplexidade() : int
---

Video
implements RecursoEducacional <Abstract>
---
- url : String
- duracao : int
---
+ Video(url : String, duracao : int)
+ getComplexidade() : int
+ toString() : String
+ hashCode() : int
+ equals(obj : Object) : boolean
---

Testes
implements RecursoEducacional <Abstract>
---
- perguntas : String[]
---
+ Testes(perguntas : String[])
+ getComplexidade() : int
+ toString() : String
+ hashCode() : int
+ equals(obj : Object) : boolean
---

Texto
implements RecursoEducacional <Abstract>
---
- texto : String
---
+ Texto(texto : String)
+ getComplexidade() : int
+ toString() : String
+ hashCode() : int
+ equals(obj : Object) : boolean
---

ModuloController
composes Modulo
---
- moduloRepositorio : HashMap<String,Modulo>
- acessos : HashMap<String,ArrayList<String>>
---
+ ModuloController()
+ cadastraMódulo(nome : String) : int
+ adicionaRecurso(idModulo : int, recurso : Object) : int
+ pegaComplexidadeModulo(id : int) : int
+ exibeModulo(id : int) : String
+ move(idModulo : int, idRecurso : int, novaPosicao : int) : void
+ defineObrigatoriedade(idModulo : int, obrigatorio : boolean) : void
+ registraAcesso(idModulo : int, idRecurso : int, email : String) : void
+ ehAcessivel(idModulo : int, idRecurso : int, email : String) : boolean
+ listaAcessos(email : String) : String
---

Modulo
composes RecursoEducacional <Abstract>
---
- nome : String
- recursos : ArrayList<RecursoEducacional>
---
+ Modulo()
+ toString() : String
+ hashCode() : int
+ equals(obj : Object) : boolean
+ getComplexidade() : int
---"
61,"//O programa principal EEEI! significa Ensino Eletrônico e Eficiente de Idiomas é o sistema que tem como objetivo de introduzir o aprendizado de idiomas aos usuários.

EEEI!
---
---
---

// Fachada do sistema, que indica ao programa principal, os comandos importantes que influencia diretamente no sistema.

Facade
association ControladorCentral
association EEEI!
---
- cc: ControladorCentral
---
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int,idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

// O controlador central tem como objetivo associar todos os controladores do sistema e manipular seus métodos por meio da interação entre todas as classes.

ControladorCentral
association ControladorEducacional
association ControladorUsuario
association ControladorModulo
---
- crc: ControladorEducacional
- cus: ControladorUsuario
- cmd: ControladorModulo
---
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int,idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

//o controlador educacional tem como responsabilidade administrar os recursos educacionais, que podem ser cadastrados e armazenados por um id único.

ControladorEducacional
aggregates Recurso
---
- recursos: HashMap<int, Recurso>
---
+ ControladorEducacional()
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ getRecurso(idRecurso: int): Recurso
---

// Recurso é uma interface que permite mais polimorfismo na manipulação do objeto RecursoEducacional.
Recurso
---
---
+ getComplexidade(): int
---

// O recurso educacional é uma classe abstrata que representa um recurso de ensino que serve como parte do aprendizado, possuindo complexidade.Podendo ser vídeo, texto ou teste.

RecursoEducacional<Abstract>
implements Recurso
---
- complexidade: int
---
+ getComplexidade(): int
+ toString(): String
+ hashCode(): int
---

// Vídeo é recurso educacional do sistema, que possui URL e uma duração do vídeo em segundos.

Video
extends RecursoEducacional<Abstract>
---
- url: String
- duracao: int
---
+ Video(url: String, duracao: int)
- defineComplexidade(url: String, duracao: int): int
+ toString(): String
---

//Texto é uma forma de aprendizado, que é um recurso no sistema, e possui o próprio texto.

Texto
extends RecursoEducacional<Abstract>
---
- textoEscrito: String
---
+ Texto(textoEscrito: String)
- defineComplexidade(textoEscrito: String): int
+ toString(): String
---

// Teste é recurso educacional, e tem como base o aprendizado por meio das perguntas.

Teste
extends RecursoEducacional<Abstract>
---
- perguntas: String[]
---
+ Teste(perguntas: String[])
- defineComplexidade(perguntas: String[]): int
+ toString(): String
---

// O controlador usuário tem a responsabilidade de cuidar dos usuários, eles são armazenados com chaves que representam o usuário, o email.

ControladorUsuario
composes Usuario
---
- usuarios: HashMap<String, Usuario>
---
+ ControladorUsuario()
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ registraAcessoUsuario(acesso: Acesso): void
---

// O usuário no sistema, é um elemento essencial que permite acessar os recursos contidos nos módulos, também possui nome, mátricula e url com sua foto, é identificado pelo seu email.

Usuario
composes Acesso
---
- email: String
- nome: String
- matricula: String
- url: String
- acessos: HashSet<Acesso>
---
+ Usuario(email: String, url: String, nome: String, matricula: String)
+ registraAcesso(acesso: Acesso): void
+ toString(): String
+ hashCode(): int
---

// O controlador Módulo tem a responsabilidade de cuidar dos módulos, que são armazenados com o seu id, que é criado durante o cadastramento, o ID é único, não pode ser um ID já cadastrado em recursos.

ControladorModulo
composes Modulo
---
- modulos: HashMap<int, Modulo>
---
+ ControladorModulo()
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, recurso: Recurso): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, recurso: Recurso, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
---

// O módulo é onde ficam armazenados os recursos educacionais que os usuários podem acessar, podendo ter ordem de acesso por meio da obrigatoriedade definida, tem como caracteristicas o nome e a complexidade criada por meio dos recursos registrados aqui.

Modulo
aggregates Recurso
---
- nome: String
- complexidade: int
- recursos: ArrayList<Recurso>
- obrigatoriedade: boolean
---
+ Modulo(nome: String)
+ adicionaRecurso(recurso: Recurso): void
- verificaRecurso(recurso: Recurso): boolean
+ getComplexidade(): int
- defineComplexidade(recursos: ArrayList<Recurso>): int
+ moveRecurso(recurso: Recurso, novaPosicao: int): void
+ defineObrigatoridade(obrigatorio: boolean): void
+ getObrigatoriedade(): boolean
+ getRecurso(index: int): Recurso
+ hashCode(): int
+ toString(): String
---

// O acesso é verificação de que um usuário acessou tal recurso em certo módulo.

Acesso
---
- idmodulo: int
- idrecurso: int
- email: String
---
+ Acesso(idModulo: int, idRecurso: int, email: String)
+ getIDmodulo(): int
+ getIDrecurso(): int
+ hashCode(): int
---"
62,"Main
---
---
---
Facade
association Main
---
- controlerRecursosUsuario: ControllerRecursosUsuario
- controlerModuloAcesso: ControlerModuloAcesso
- controlerUsuario: ControlerUsuario
---
+ Facade()
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String

---
ControleRecursos
association Facade
---
- video: HashMap<Video>
- texto: HashMap<Texto>
- pergunta: HashMap<Pergunta>
---
+ ControleRecursosUsuario()
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String

---
Video
association ControleRecursos
---
- id:int
- url: String
- duracao: int
- complexidade: int
---
+ Video()
+ complexidade(duracao: int): void
+ toString():String
---
Texto
association ControleRecursos
---
- id:int
- texto: String
- complexidade: int
---
+ Texto()
+ complexidade(texto: String): void
+ toString():String
---
Teste
association ControleRecursos
---
- id:int
- Perguntas[]: String
- complexidade: int
---
+ Teste()
+ complexidade(perguntas[]:String): void
+ toString():String
---
ControlerUsuario
association Facade
association ControleRecursos
association Usuario
---
- usuarios: HashMap<Usuario>
---
+ ControlerUsuario()
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String

---
Usuario
---
- email: String
- url: String
- nome: String
- matricula: String
- acessos : ArrayList<String>
---
+ Usuario()
+ toString(): String
---
ControlerModuloAcesso
association Facade
association ControleRecursos
association ControlerUsuario
---
- modulos: HashMap<Modulo>

---
+ ControlerModuloAcesso()
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void

---
Modulo
association ControlerModuloAcesso
---
- id : int
- nome: String
- complexidade: String
- recursos: ArrayList<Recursos>
---
+ Modulo()
+ complexidade(): void
+ move(idRecurso: int, novaPosicao: int): void
+ toString(): String
---"
63,"Facade
---
- cr: ControllerDeRecursos
- cu: ControllerDeUsuarios
- cm: ControllerDeModulos
---
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String // método que retorna toString de um recurso
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

ControllerDeRecursos
association Facade
composes RecursoEducacional <<Abstract>>
---
- RecursosEducacionais: TreeMap<int, RecursoEducacional>
---
//Entrada pode conter um inteiro separado por "","" ou "" "" dependendo do tipo de recurso
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
- geraId(): int // método privado que gera um Id único para o recurso
+ editaRecursoEducacional(id: int, opcao: String, valor: String): void
+ exibe(id: int): String
+ exibeRecursosEducacionais(): String
+ getRecurso(idRecurso: int): RecursoEducacional
---

RecursoEducacional <<Abstract>>
---
- complexidade: int
- id: int
---
# setDescricao(descricao: String): void
# getDescricao(): String
# setDuracao(duracao: String): void
# getDuracao(): int
+ setId(id: int): int
+ getId(): int
+ getComplexidade(id: int): int
+ exibe(): String
+ hashCode(): int
+ equals(o: object): boolean
+ compareTo(o: object): object
---

Video
extends RecursoEducacional <<Abstract>>
---
- id: int
- url: String
- duracao: int
- complexidade: int
---
+ Video(url: String, duracao: int)
- calculaComplexidade(): void // método que calcula internamente complexidade
+ setId(id: int): void
+ getComplexidade(): int
+ toString(): String
+ hashCode(): int
+ equals(o: object): boolean
---

Texto
extends RecursoEducacional <<Abstract>>
---
- id: int
- texto: String
- complexidade: int
---
+ Texto(texto: String)
- calculaComplexidade(): void // método que calcula internamente complexidade3
+ setId(id: int): void
+ getComplexidade(): int
+ toString(): String
+ hashCode(): int
+ equals(o: object): boolean
---

Teste
extends RecursoEducacional <<Abstract>>
---
- id: int
- perguntas: String []
- complexidade: int
---
+ Teste(perguntas: String [])
- calculaComplexidade(): void // método que calcula internamente complexidade
+ setId(id: int): void
+ getComplexidade(): int
+ toString(): String
---

ControllerDeUsuario
association Facade
association ControllerDeModulos
composes Usuario
---
- usuarios: Map<String, Usuarios>
---
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ editaUsuario(email: String, opcao: String, valor: String): void
+ exibeUsuario(email: String): String
+ getPosicaoDeRecurso(idDoRecurso: int): int
+ getUsuario(idUsuario: int): Usuario
---

Usuario
---
- email: String
- url: String
- nome: String
- matricula: String
- acesso: ArrayList<RecursoEducacional>
---
+ Usuario(email: String, url: String, nome: String, matricula: String)
+ getEmail(): String
+ verificaRecursoAcessado(idRecuso: int): boolean
+ gePosicaoDoRecurso(): int
+ getUrl(): String
+ getNome(): String
+ getMatricula(): String
+ setEmail(): String
+ setUrl(): String
+ setNome(): String
+ setMatricula(): String
+ hashCode(): int
+ equals(o: object): boolean
---

ControllerDeModulos
composes Modulo
association ControllerDeRecursos
---
- modulos: TreeMap<int, Modulo>
---
+ cadastraModulo(nome: String): int
- geraId(): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ getComplexidade(idModulo: int): int
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
- verificadorDeObrigatorio(idModulo: int): boolean
+ exibeModulo(idModulo: int): String
+ exibeModulos(): String
+ verificaAcesso(idModulo: int,usuario: Usuario, idRecursoAcessado: int): boolean
---

Modulo
composes RecursoEducacional <<Abstract>>
---
- nome: String
- recursos: LinkedList<RecursoEducacional>
- complexidade: int
- obrigatoriedade: boolean
---
+ Modulo(nome: String)
+ adicionaRecurso(recurso: RecursoEducacional):void
// forma de evitar com que um mesmo recurso seja adicionado novamente no modulo
- verificaRecursoAdicionado(recursoAdd: RecursoEducacional): boolean
- calculaComplexidade(): void
+ getComplexidade(): int
+ setObrigatoriedade(valor: boolean): void
+ getObrigatoriedade(): boolean
+ getRecruso(posicao: int): RecursoEducacional
+ move(idRecurso: int, novaPosicao: int): void
+ getPosicaoDeRecurso(): int
+ toString(): String
+ hashCode(): int
+ verificaAcesso(usuario: Usuario, idRecurso: int): boolean
+ equals(o: object): boolean
---"
64,"ControladorPrincipal
composes RecursoEducacional<Interface>
composes Usuario
composes Modulo
---
- recursosEducacionais: HashMap<int, RecursoEducacional>
- usuarios: HashMap<String, Usuario>
- modulos: HashMap<int, Modulo>
---
+ cadastraVideo(url: String, duracao: int): int
+ cadastraTexto(texto: String): int
+ cadastraPergunta(perguntas: String[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
+ cadastraUsuario(email: String, url: String, nome: String, matricula: String): void
+ exibeUsuario(email: String): String
+ cadastraMódulo(nome: String): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): String
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: String): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: String): boolean
+ listaAcessos(email: String): String
---

RecursoEducacional<Interface>
---
---
+ pegaComplexidade(): int
- hashCode(): int
- equals(): int
+ toString(): String
---

Video
implements RecursoEducacional<Interface>
---
- url: String
- duracaoVideo: int
- complexidade: int
- id: int
---
+ Video(url: String, duracao: int)
+ pegaComplexidade(): int
- hashCode(): int
- equals(): int
+ toString(): String
---

Texto
implements RecursoEducacional<Interface>
---
- texto: String
- complexidade: int
- id: int
---
+ Texto(texto: String)
+ pegaComplexidade(): int
- hashCode(): int
- equals(): int
+ toString(): String
---

Pergunta
implements RecursoEducacional<Interface>
---
- perguntas: String[]
- complexidade: int
- id: int
---
+ Pergunta(perguntas: String[])
+ pegaComplexidade(): int
- hashCode(): int
- equals(): int
+ toString(): String
---

Usuario
---
- email: String
- urlFoto: String
- nome: String
- matricula: int
- acessos: ArrayList<Integer>
---
+ Usuario(email: String, url: String, nome: String, matricula: String)
+ registraAcesso(idModulo: int, idRecurso: int): void
+ listaAcessos(): String
- hashCode(): int
+ ehAcessivel(idModulo: int, idRecurso: int): boolean
- equals(): int
+ toString(): String
---

Modulo
composes RecursoEducacional<Interface>
---
- nomeModulo: String
- complexidade: int
- recursos: ArrayList<RecursoEducacional>
- ordemObrigatoria: boolean
---
+ Modulo(nome: String)
+ adicionaRecurso(recurso: RecursoEducacional): int
+ verificaExistenciaRecurso(idRecurso: int): boolean
+ pegaComplexidadeModulo(): int
+ move(idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(obrigatorio: boolean): void
+ ehObrigatorio(): boolean
- hashCode(): int
- equals(): int
+ toString(): String
---"
65,"ModulosController
composes Modulo
---
- modulos: HashMap<int, Modulo>
---
+ cadastraModulo(nome: str): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ move(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedade(idModulo: int, obrigatorio: boolean): void
+ exibeModulo(id: int): str
---

Modulo
---
- complexidade: int
- id: int
- nome: str
- obrigatorio: boolean
- recursos: ArrayList<int>
---
+ Modulo(nome: str)
+ adicionaRecurso(idRecurso: int): int
+ moveRecurso(idRecurso: int, novaPosicao: int): void
+ setObrigagoriedade(obrigatorio: boolean): void
+ toString(): str
---

RecursosDeEnsinoController
composes RecursosDeEnsino <Interface>
---
- recursosDeEnsino: HashMap<int, RecursosDeEnsino <Interface>>
---
+ cadastraVideo(url: str, duracao: int): int
+ cadastraTexto(texto: str): int
+ cadastraPergunta(perguntas: str[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): String
---

RecursosDeEnsino <Interface>
---
- id: int
---
+ pegaComplexidade(id: int): int
+ exibe(id: int): str
---

Video
implements RecursosDeEnsino <Interface>
---
- url: str
- duracao: int
---
+ Video(url: str, duracao: int)
+ getComplexidade(): int
+ toString(): str
---

Texto
implements RecursosDeEnsino <Interface>
---
- texto: str
---
+ Texto(texto: str)
+ getComplexidade(): int
+ toString(): str
---

Teste
implements RecursosDeEnsino <Interface>
---
- perguntas: str[]
---
+ Teste(perguntas: str[])
+ getComplexidade(): int
+ toString(): str
---

UsuariosController
composes Usuario
---
- usuarios: HashMap<str, Usuario>
---
+ cadastraUsuario(email: str, url: str, nome: str, matricula: str): void
+ registraAcesso(idModulo: int, idRecurso: int, email: str): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: str): boolean
+ listaAcessos(email: str): str
+ exibeUsuario(email: str): str
---

Usuario
association Modulo
---
- url: str
- nome: str
- matricula: str
- email: str
- recursosAcessados: ArrayList<int>
- modulos: HashMap<int, Modulo>
---
+ Usuario(url: str, nome: str, matricula: str, email: str)
+ registraModulo(idModulo: int, idRecurso: int): void
+ acessivel(idModulo: int, idRecurso: int): boolean
+ acessos(): str
+ toString(): str
---"
66,"Facade
composes EeeiController
---
- eeei: EeeiController
---
+ Facade()
+ cadastraVideo(url: str, duracao: int): int
+ cadastraTexto(texto: str): int
+ cadastraPergunta(perguntas: str[]): int
+ pegaComplexidade(id: int): int
+ exibe(id: int): str
+ cadastraUsuario(email: str, url: str, nome: str, matricula: str): void
+ exibeUsuario(email: str): str
+ cadastraMódulo(nome: str): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): str
+ moveRecursoNoModulo(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedadeDaOrdemDosRecursosDoModulo(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: str): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: str): boolean
+ listaAcessos(email: str): str
---

EeeiController
composes RecursoEducacional <interface>
composes Usuario
composes Modulo
composes AcessosUsuario
---
- recursosEducacionais: HashMap<id, RecursoEducacional>
- usuarios: HashMap<email, Usuario>
- modulos: HashMap<id, Modulo>
- id: int
- historicoDeAcessos: HashMap<emailUsuario, AcessosUsuario>
---
+ EeeiController()
+ cadastraVideo(url: str, duracao: int): int
+ cadastraTexto(texto: str): int
+ cadastraPergunta(perguntas: str[]): int
- atualizaId(): void
+ pegaComplexidade(id: int): int
+ exibe(id: int): str
+ cadastraUsuario(email: srt, url: str, nome: str, matricula: str): void
+ exibeUsuario(email: str): str
+ cadastraMódulo(nome: str): int
+ adicionaRecurso(idModulo: int, idRecurso: int): int
+ pegaComplexidadeModulo(id: int): int
+ exibeModulo(id: int): str
+ moveRecursoNoModulo(idModulo: int, idRecurso: int, novaPosicao: int): void
+ defineObrigatoriedadeDaOrdemDosRecursosDoModulo(idModulo: int, obrigatorio: boolean): void
+ registraAcesso(idModulo: int, idRecurso: int, email: str): void
+ ehAcessivel(idModulo: int, idRecurso: int, email: str): boolean
+ listaAcessos(email: str): str
---

RecursoEducacional <interface>
---
---
+ pegaComplexidade(id: int): int
---

Video
implements RecursoEducacional <interface>
---
- url: str
- duracao : int
- id: int
---
+ Video(url: str, duracao: int, id: int)
+ pegaComplexidade(id: int): int
+ getId(): int
+ hashCode(): int
+ equals(o: Object): boolean
+ toString(): str
---

Texto
implements RecursoEducacional <interface>
---
- texto: str
- id: str
---
+ Texto(texto: str, id: int)
+ pegaComplexidade(id: int): int
+ hashCode(): int
+ equals(o: Object): boolean
+ toString(): str
---

Teste
implements RecursoEducacional <interface>
---
- perguntas: str[]
- id: int
---
+ Teste(perguntas: str[], id: int)
+ pegaComplexidade(id: int): int
+ hashCode(): int
+ equals(o: Object): boolean
+ toString(): str
---

Usuario
---
- email: str
- url: str
- nome: str
- matricula: str
---
+ Usuario(email: str, url: str, nome: str, matricula: str)
+ hashCode(): int
+ equals(o: Object): boolean
+ toString(): str
---

Modulo
---
- nome: str
- id: int
- recursosEducaionais: List<id, RecursoEducacional>
- ordemDosRecursosObrigatoria: boolean
---
+ Modulo(nome: str, id: int)
+ adicionaRecurso(id: int, recursoEducacional: RecursoEducacional): int
+ pegaComplexidade(): int
+ moveRecurso(idRecurso: int, novaPosicao: int): void
+ setOrdemDosRecursosObrigatoria(obrigatoriedade: boolean): void
+ getOrdemDosRecursosObrigatoria(): boolean // True se houver obrigatoriedade no módulo, false caso contrário.
+ getIdRecusos(): int[] // Retorna os ids dos recursos na ordem em que se encontram.
+ hashCode(): int
+ equals(o: Object): boolean
+ toString(): str
---

AcessosUsuario
composes Acesso
---
- emailUsuario: str
- acessos: HashMap<idModulo, Acesso>
---
+ AcessosUsuario(emailUsuario: str)
+ cadastraAcesso(emailUsuario: str, idModulo: int): void
+ registraAcessoRecursoEducacional(idModulo: int, id: recurso): void
+ getAcesso(idModulo: int): Acesso
+ hashCode(): int
+ equals(o: Object): boolean
+ toString(): str // Retorna a exibição de todos os acessos do usuário.
---

Acesso
---
- emailUsuario: str
- idModulo: int
- idRecursosEducacionais: List<Integer> //guarda os ids dos recursos na ordem de acesso.
---
+ Acesso(emailUsuario: str, idModulo: int)
+ registraAcessoRecursoEducacional(idRecurso: recurso): void
+ getIdRecusos(): int[] // Retorna os ids dos recursos já acessados pelo = usuário no módulo.
+ hashCode(): int
+ equals(O: Object): boolean
+ toString(): str // Retorna a exibição dos acessos do usuário no módulo.
---

 

 

 "
67,"main
association Facade
---
---
---

Facade
composes RecursosController
composes ModuloController
---
- controllerRecursos : RecursosController
- controllerModulo : ModuloController
---
+ Facade()
+ cadastraVideo(url : String, duracao : int) : int
+ cadastraTexto(texto : String) : int
+ cadastraPergunta(perguntas : String[]) : int
+ pegaComplexidade(id : int) : int
+ exibe(id : int) : String
+ cadastraUsuario(email : String, url : String, nome : String, matricula : String) : void
+ exibeUsuario(email : String) : String
+ cadastraMódulo(nome : String) : int
+ adicionaRecurso(idModulo : int, idRecurso : int) : int
+ pegaComplexidadeModulo(id : int) : int
+ exibeModulo(id : int) : String
+ move(idModulo : int, idRecurso : int, novaPosicao : int) : void
+ defineObrigatoriedade(idModulo : int, obrigatorio : boolean) : void
+ registraAcesso(idModulo : int, idRecurso : int, email : String) : void
+ ehAcessivel(idModulo : int, idRecurso : int, email : String) : boolean
+ listaAcessos(email : String) : String
---

RecursosController
composes Usuario
composes RecursoEducacional <Interface>
---
- usuariosRepositorio : HashMap<String,Usuario>
- recursosEducacionaisRepositorio : HashMap<int,RecursoEducacional>
---
+ RecursosController()
+ cadastraVideo(url : String, duracao : int) : int
+ cadastraTexto(texto : String) : int
+ cadastraPergunta(perguntas : String[]) : int
+ pegaComplexidade(id : int) : int
+ exibe(id : int) : String
+ cadastraUsuario(email : String, url : String, nome : String, matricula : String) : void
+ exibeUsuario(email : String) : String
+ getRecurso() : RecursoEducacional
---

Usuario
---
- email : String
- url : String
- nome : String
- matricula : String
---
+ Usuario(email : String, url : String, nome : String, matricula : String)
+ toString() : String
+ hashCode() : int
+ equals(obj : Object) : boolean
---

RecursoEducacional <Interface>
---
---
+ getComplexidade() : int
---

Video
implements RecursoEducacional <Interface>
---
- url : String
- duracao : int
---
+ Video(url : String, duracao : int)
+ getComplexidade() : int
+ toString() : String
+ hashCode() : int
+ equals(obj : Object) : boolean
---

Testes
implements RecursoEducacional <Interface>
---
- perguntas : String[]
---
+ Testes(perguntas : String[])
+ getComplexidade() : int
+ toString() : String
+ hashCode() : int
+ equals(obj : Object) : boolean
---

Texto
implements RecursoEducacional <Interface>
---
- texto : String
---
+ Texto(texto : String)
+ getComplexidade() : int
+ toString() : String
+ hashCode() : int
+ equals(obj : Object) : boolean
---

ModuloController
composes Modulo
---
- moduloRepositorio : HashMap<String,Modulo>
- acessos : HashMap<String,ArrayList<String>>
---
+ ModuloController()
+ cadastraMódulo(nome : String) : int
+ adicionaRecurso(idModulo : int, recurso : Object) : int
+ pegaComplexidadeModulo(id : int) : int
+ exibeModulo(id : int) : String
+ move(idModulo : int, idRecurso : int, novaPosicao : int) : void
+ defineObrigatoriedade(idModulo : int, obrigatorio : boolean) : void
+ registraAcesso(idModulo : int, idRecurso : int, email : String) : void
+ ehAcessivel(idModulo : int, idRecurso : int, email : String) : boolean
+ listaAcessos(email : String) : String
---

Modulo
composes RecursoEducacional <Interface>
---
- nome : String
- recursos : ArrayList<RecursoEducacional>
---
+ Modulo()
+ toString() : String
+ hashCode() : int
+ equals(obj : Object) : boolean
+ getComplexidade() : int
---"
